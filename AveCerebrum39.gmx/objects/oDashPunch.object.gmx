<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>State = "Idle";

target = noone;
gridX = 0;
gridY = 0;

owner = noone;


endX = 0;
endY = 0;

startY = 0;
startX = 0;

airTime = 1.5;
airTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch State
{
    case "Idle":
        if instance_exists(target)
        {
            State = "Pound";
        }
    break;
    
    case "Pound":
        target.State = "InAir";
        endX = startX;
        endY = startY-400;
        midY = startY-abs((startY-endY))
        midX = target.x;
        
        State = "InAir";
    break;
    
    case "InAir":
        airTimer += DELTA_TIME/airTime;
        target.x = MoveInBezierCurve(airTimer,startX,midX,endX);
        target.y = MoveInBezierCurve(airTimer,startY,midY,endY);
        target.image_angle += 380*DELTA_TIME;
        if airTimer &gt;=1
        {
            airTimer = 0;
            State = "ComeDown";
        }
    break;
    
    case "ComeDown":
        airTimer += DELTA_TIME/airTime;
        target.x = MoveInBezierCurve(airTimer,endX,midX,startX);
        target.y = MoveInBezierCurve(airTimer,endY,midY,startY);
        target.image_angle += 380*DELTA_TIME;
        if airTimer &gt;=1
        {
            State = "End";
        }
    break;
    
    case "End":
        if map[target.gridX,target.gridY].occupant != noone
        {
            map[target.gridX,target.gridY].occupant.State = "Dead";
        }
        
        map[target.gridX,target.gridY].occupant = target;
        target.State = "Idle";
        target.x = startX;
        target.y = startY;
        target.image_angle = 0;
        instance_destroy();
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
