<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sShield</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oTerrain</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gridX = 0;
gridY = 0;
InitializeBasicInfo("Player",false,true,true);
MovementTimer = 0;
MovementTime = 0;

Duration = 20;

AttackTimer = 0;

Appear = sShieldAppear;
Idle = sShield;
Disentigrate = sShieldDisentigrate;

State = "Appear";

image_speed = AnimationSpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch State{

    case "Appear":
        if sprite_index != Appear{
            if instance_exists(map[Owner.gridX+1,Owner.gridY].occupant){
                instance_destroy();
                
            }else{
                gridX = Owner.gridX+1;
                gridY = Owner.gridY;
                map[gridX,gridY].occupant = id;
                x = map[gridX,gridY].x;
                y = map[gridX,gridY].y;
            }
            sprite_index = Appear;    
            image_index = 0;
            AnimationTime = image_number*DELTA_TIME/image_speed;
            Timer = 0;
        }
        Timer += DELTA_TIME;
        if Timer &gt;= AnimationTime{
            State = "Shielding";
            sprite_index = Idle;
        }
    break;

    case "Shielding":
        Duration -= DELTA_TIME;        
        if Duration &lt;= 0{
            State = "Disentigrate";
        }
    break;

    case "Disentigrate":
        if sprite_index != Disentigrate{
            map[gridX,gridY].occupant = noone;
            sprite_index = Disentigrate;
            image_index = 0;
            AnimationTime = image_number*DELTA_TIME/image_speed;
            Timer = 0;
        }    
        Timer += DELTA_TIME;
    
        if Timer &gt;= AnimationTime{
            instance_destroy();
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
