<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MovingTorso();
BodyIsWhole = false;
switch State{  
    case "Stunned":
        State = "Idle";
    break; 

    case  "Return":
        State = "Idle";
    break;
    
    case"Attack":
        State = "Idle";
    break;
    
    case "UsingAbility":
        State = "Idle";
    break;
    
    case "AbilityAnimation":
        State = "Idle";
    
    break;
    
    case "Attacking":
        State = "Idle";
    break;
    
    
    //Fly toward our intended position on the map
    case"FlightPath":
        if DestinationX = 0 or DestinationY = 0{
            DestinationX = map[gridX,gridY].x;
            DestinationY = map[gridX,gridY].y;
            Direction = point_direction(x,y,DestinationX,DestinationY); 
            Distance = point_distance(x,y,DestinationX,DestinationY);
            FlightTime = (Distance*DELTA_TIME)/FlightSpeed
            RotationMultiplier = FlightTime*DELTA_TIME;
            /*if FlightTime &lt; 0.8{
                FlightTime = 0.8;
                FlightSpeed = Distance*DELTA_TIME;
            
            }*/
        }
        image_angle += 360*RotationMultiplier;
        direction = Direction;
        speed = FlightSpeed;
        FlightTime -= DELTA_TIME;
        if FlightTime &lt;= 0{
            image_angle = 0;
            TimerStart = true;
            speed = 0;
            direction = 0;
            x = DestinationX;
            y = DestinationY;
            State = "Idle";
        }
    break;
    
    case "MoveUp":
        if  sprite_index!= MoveUp{
            sprite_index = MoveUp;
            DestinationX = map[gridX,gridY].x;
            DestinationY = map[gridX,gridY].y;
            AnimationTime = image_number*DELTA_TIME/image_speed;
            Timer = 0;
            FlightSpeed = point_distance(x,y,DestinationX,DestinationY)*DELTA_TIME/AnimationTime;
            direction = point_direction(x,y,DestinationX,DestinationY);
            speed = FlightSpeed;
        }
        Timer += DELTA_TIME;
        if Timer &gt;= AnimationTime{
            x = DestinationX;
            y = DestinationY;
            State = "Idle";
            speed = 0;
            direction = 0
            sprite_index = StationaryLeft;
            Timer = 0;
        
        }
        
    break;
    
    case "MoveDown":
        if  sprite_index!= MoveDown{
            sprite_index = MoveDown;
            DestinationX = map[gridX,gridY].x;
            DestinationY = map[gridX,gridY].y;
            AnimationTime = image_number*DELTA_TIME/image_speed;
            Timer = 0;
            FlightSpeed = point_distance(x,y,DestinationX,DestinationY)*DELTA_TIME/AnimationTime;
            direction = point_direction(x,y,DestinationX,DestinationY);
            speed = FlightSpeed;
        }
        Timer += DELTA_TIME;
        if Timer &gt;= AnimationTime{
            x = DestinationX;
            y = DestinationY;
            State = "Idle";
            speed = 0;
            direction = 0
            sprite_index = StationaryRight;
            Timer = 0;
        
        }
    break;
    
    case "MoveLeft":
        if  sprite_index!= MoveLeft{
            sprite_index = MoveLeft;
            DestinationX = map[gridX,gridY].x;
            DestinationY = map[gridX,gridY].y;
            AnimationTime = image_number*DELTA_TIME/image_speed;
            Timer = 0;
            FlightSpeed = point_distance(x,y,DestinationX,DestinationY)*DELTA_TIME/AnimationTime;
            direction = point_direction(x,y,DestinationX,DestinationY);
            speed = FlightSpeed;
        }
        Timer += DELTA_TIME;
        if Timer &gt;= AnimationTime{
            x = DestinationX;
            y = DestinationY;
            State = "Idle";
            speed = 0;
            direction = 0
            sprite_index = StationaryLeft;
            Timer = 0;
        
        }
    break;
    
    case "MoveRight":
    if  sprite_index!= MoveRight{
            sprite_index = MoveRight;
            DestinationX = map[gridX,gridY].x;
            DestinationY = map[gridX,gridY].y;
            AnimationTime = image_number*DELTA_TIME/image_speed;
            Timer = 0;
            FlightSpeed = point_distance(x,y,DestinationX,DestinationY)*DELTA_TIME/AnimationTime;
            direction = point_direction(x,y,DestinationX,DestinationY);
            speed = FlightSpeed;
        }
        Timer += DELTA_TIME;
        if Timer &gt;= AnimationTime{
            x = DestinationX;
            y = DestinationY;
            State = "Idle";
            speed = 0;
            direction = 0
            sprite_index = StationaryRight;
            Timer = 0;
        
        }
    break;   
    
     
    case "Idle":
        
    break;
    
    case "FuseBack":
        Owner.BodyIsWhole = true;
        Owner.State = "Idle";
        with Owner{
            sprite_index = Idle;
        }
        oCursor.Party[Owner.PartyNumber] = Owner;
        instance_destroy();
    break;


       
    
}
if TimerStart{
    DeathTimer -= DELTA_TIME;
    DeathIndex = ceil(DeathTimer);
    TimerSprite = TimerArray[DeathIndex]
    if DeathTimer &lt;= 0{
        map[gridX,gridY].occupant = noone;
        //Kill the actor
        Owner.State = "Dead";
        Owner.BodyIsWhole = true;
        Owner.HitPoints = 0
        instance_destroy();
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();


if TimerStart{
    draw_sprite(TimerSprite,0,x,y+20);
    

}
draw_text(1080,100,string(gridX));
draw_text(1080,200,string(gridY));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
