<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Owner = noone;

Target = noone;
State = "Idle";

gridX = 0;
gridY = 0;


endX = 0;
endY = 0;
midX = 0;
midY = 0;
startX = 0;
startY = 0;

moveTimer = 0;

animationFrames = 0;
animationTime = 1;

GroundTime = 5;
Timer = 0;

Damage = 5;

ShakeAmount = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch State
{
    case "Idle":
    
    break;
    
    case "PickUp":
        moveTimer += (1/animationTime)*DELTA_TIME;    
        Target.State = "PickedUp";
        Target.currentAction = noone;
        with Target
        {
            ds_queue_clear(actionQueue);
        }
        if(moveTimer &gt;= 1)
        {
            Target.image_angle = -90;
            State = "Wait";
            Target.x = endX;
            Target.y = endY;
        }
        else
        {
            Target.image_angle = point_direction(Target.x,Target.y,MoveInBezierCurve(moveTimer,startX,midX,endX),MoveInBezierCurve(moveTimer,startY,midY,endY));
            Target.x = MoveInBezierCurve(moveTimer,startX,midX,endX);
            Target.y = MoveInBezierCurve(moveTimer,startY,midY,endY);
        }
        
        
    break;
    
    case "Target":
        //Move the target in an arc down
        moveTimer += (2/animationTime)*DELTA_TIME;
        
        
        if(moveTimer &gt;= 1)
        {
            Target.State = "Grounded";
            Target.image_angle = 180;
            
            
            Target.Damage += Damage;
            Target.Shake = true;
            Target.SpriteShakeAmount = ShakeAmount;
            Target.ShakeTime = 0;
            
            Target.x = startX;
            Target.y = startY;
            State = "Ground";
        }
        else
        {
            Target.image_angle = point_direction(Target.x,Target.y,MoveInBezierCurve(moveTimer,startX,midX,endX),MoveInBezierCurve(moveTimer,startY,midY,endY))
            Target.x = MoveInBezierCurve(moveTimer,endX,midX,startX);
            Target.y = MoveInBezierCurve(moveTimer,endY,midY,startY);
        }

    break;
    
    case "Ground":
        Timer += DELTA_TIME;
        if(Timer &gt;= GroundTime)
        {
            State = "Break";
        }
    break;
    
    case "Break":
        if Target.HitPoints &gt; 0
        {
            Target.State = "Idle";
            Target.image_angle = 0;
        }
        else
        {
            Target.State = "Dead";
        }
        instance_destroy();
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
