<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = room_width/2;
y = room_height/2;

ButtonSelected = 0;

Buttons = 1;

instance_create(x,y,oSpotlight);


Button0Active = false;
Button1Active = false;

//Gameover screen
TimeSinceEveryCharacterDied = 0;
TimeTillTheGameOverFadeOutBegins = 2;
TimeTheFadeOutWillTake = 5;
FadeOutAlpha = 0;
GameOverText = false;

/*
OverworldEncounters = ds_map_create();
ds_map_copy(OverworldEncounters,oGame.EncountersAccessor);
*/
//Pause before battle starts
GraceTime = true;
State = "Initializing";

//For when we want to make the overworld encounters
/*
EncounterNumber = oBattleScreenPrep.EncounterNumber;
EncounterSize = oBattleScreenPrep.EncounterSize;

EnemyNumbers = EncounterSize;

AnimationInProgress = 0;
*/
DeadPlayers = ds_list_create();

MapSize = "Normal";

ReadyToSpawn = false;

//Determine how many hexes to create according to the size of the current map
First = true;

mapWidth =  14;
mapHeight = 8;


xMargin = (1280-(mapWidth*GRID_SIZE))/2+GRID_SIZE/2;
yMargin = (720-(mapHeight*GRID_SIZE))/2+GRID_SIZE/2;

globalvar map;
var Indent, First, PreviousY, Done;
Indent = false;
First = true;
Done = false;

EncounterSize = oBattleScreenPrep.EncounterSize;

Players = 0;
var i;
i = 0;
repeat(array_height_2d(oGame.PlayerParty)){
    if oGame.ShowPlayer[i] != false
    {
        if oGame.PlayerParty[i,0] != noone{
            Players++;
            PlayerCharacters[i,0] = oGame.PlayerParty[i,0]; 
            PlayerCharacters[i,1] = oGame.PlayerParty[i,1];
            PlayerCharacters[i,2] = oGame.PlayerParty[i,2];  
        }
    }
    else{
            PlayerCharacters[i,0] = noone;
            PlayerCharacters[i,1] = 0;
            PlayerCharacters[i,2] = 0;
        }
    i += 1;
}

PortraitXCoordinate = 16;
PortraitCoordinates[0] = xMargin;
PortraitCoordinates[1] = xMargin + 200;
PortraitCoordinates[2] = xMargin + 400;
PortraitCoordinates[3] = xMargin + 600;
//Create Node
for(xx = 0; xx&lt;mapWidth; xx += 1){
    for(yy = 0; yy&lt;mapHeight; yy +=1){
        map[xx, yy] = instance_create(xMargin+(xx*GRID_SIZE), yMargin+(yy*GRID_SIZE),oNode);
        CreatedNode = map[xx, yy];
        CreatedNode.gridX = xx;
        CreatedNode.gridY = yy;
    }
}

//populate neighbor lists
for(xx = 0; xx&lt;mapWidth; xx+= 1){
    for(yy = 0; yy&lt;mapHeight; yy+=1){
    
        node = map[xx, yy];  
        
        //add left neighbor
        if(xx &gt; 0){
            ds_list_add(node.neighbors, map[xx - 1, yy]);
        }   
        // add right neighbor
        if (xx &lt; mapWidth - 1){
            ds_list_add(node.neighbors, map[xx+1, yy]);
        }
        //add bottom neighbor
        if (yy &lt; mapHeight - 1){
            ds_list_add(node.neighbors, map[xx, yy+1]);
        }
        //add top neighbor
        if( yy &gt; 0){
            ds_list_add(node.neighbors, map[xx, yy-1]);   
        }
        //add top left neighbor
        if(xx &gt; 0 and yy &gt; 0){
            ds_list_add(node.neighbors, map[xx-1, yy-1]);
        }
        //add top right neighbor
        if(xx &lt; mapWidth - 1 and yy &gt; 0){
            ds_list_add(node.neighbors, map[xx+1, yy-1]);
        }
        //add bottom left neighbor
        if( xx &gt; 0 and yy &lt; mapHeight - 1){
            ds_list_add(node.neighbors, map[xx-1, yy+1])
        }
        //add bottom right neighbor
        if(xx &lt; mapWidth - 1 and yy &lt; mapHeight - 1){
            ds_list_add(node.neighbors, map[xx+1, yy+1])
        }
    }
    
}

//Spawn characters
SpawngridX = 2;
SpawngridY = 2;

//Player character spawning
var c, PlayerSpawned;
c = 0;
repeat(4){
    if PlayerCharacters[c, 0] != noone{
        gridX = PlayerCharacters[c,1];
        gridY = PlayerCharacters[c,2];
        PlayerSpawned = instance_create(map[gridX,gridY].x,map[gridX,gridY].y, PlayerCharacters[c,0]);
        PlayerSpawned.gridX = gridX;
        PlayerSpawned.gridY = gridY;
        PlayerSpawned.queueX = gridX;
        PlayerSpawned.queueY = gridY;
        abilityList = oGame.PlayerParty2[? PlayerCharacters[c,0]];
        abilities = abilityList[| 0];
        PlayerSpawned.Abilities = abilities
        with(PlayerSpawned)
        {
            sortOutAbilities();
        }
        map[gridX,gridY].occupant = PlayerSpawned;
        PlayerSpawned.State = "Paused";
    
    
    }
    c += 1;


}


var b;
b = 0;
//Spawning the encounter
repeat(EncounterSize){
    gridX = oBattleScreenPrep.EncounterSpawnTable[b,1];
    gridY = oBattleScreenPrep.EncounterSpawnTable[b,2];
    EnemySpawn = instance_create(map[gridX,gridY].x,map[gridX,gridY].y,oBattleScreenPrep.EncounterSpawnTable[b,0]);
    EnemySpawn.gridX = gridX;
    EnemySpawn.gridY = gridY;
    map[gridX,gridY].occupant = EnemySpawn;
    b += 1;
    EnemySpawn.State = "Paused";
}

//Spawn the character portraits
var p;
p = 0;
repeat(array_length_1d(PlayerCharacters)){
    if instance_exists(PlayerCharacters[p,0]){
        Portrait = instance_create(PortraitXCoordinate,PortraitCoordinates[p], PlayerCharacters[p,0].CharacterPortrait);
        Portrait.Owner = PlayerCharacters[p,0];
    }
    p += 1;

}





/*
PlayerCharacters = array_height_2d(oGame.PlayerParty);

var i ;
i = 0;
//Spawn Player Party
repeat(PlayerCharacters){
   
    with instance_create(SpawngridX*GRID_SIZE, SpawngridY*GRID_SIZE, oGame.PlayerParty[i, 0]){
        gridX = oGame.PlayerParty[i, 1];
        gridY = oGame.PlayerParty[i, 2];
        map[gridX, gridY].occupant = id;
        x = map[gridX,gridY].x;
        y = map[gridX,gridY].y;
        AddToTurnOrder();
     }
     SpawngridY += 1;
     
     
     i += 1;
     
}
*/
/*
//Spawn EnemyEncounter
var b;
var EnemyXgrid, EnemyYgrid, EnemyID;
b = 0;
while(b &lt; EncounterSize){
    //x coordinate on grid
    EnemyXgrid = oBattleScreenPrep.EncounterSpawnTable[b, 1];
    //y coordinate on grid
    EnemyYgrid = oBattleScreenPrep.EncounterSpawnTable[b, 2];
    //id of enemy
    EnemyID    = oBattleScreenPrep.EncounterSpawnTable[b, 0];
    //create enemy at the desired location
    with (instance_create(EnemyXgrid*GRID_SIZE, EnemyYgrid*GRID_SIZE, EnemyID)){
        gridX = EnemyXgrid;
        gridY = EnemyYgrid;
        map[EnemyXgrid, EnemyYgrid].occupant = EnemyID;
        x = map[EnemyXgrid, EnemyYgrid].x
        y = map[EnemyXgrid, EnemyYgrid].y
        AddToTurnOrder();
    }
    
    b += 1;
}

*/




instance_create(x,y,oCursor);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
switch(State){

    case"Initializing":
    /*
        with(oNoDeH){
                if (instance_position(x + GRID_SIZE/2, y + GRID_SIZE/2, oTerrain)){
                tempTerrain = instance_position(x + GRID_SIZE/2, y + GRID_SIZE/2, oTerrain);
            
                
                switch(tempTerrain.type){
                    case"Wall":
                        type = "Wall";
                        sprite_index = sWallB;
                        passable = false;
                        
                        break;
                        
                    case"Rubble":
                        type= "Rubble";
                        sprite_index = sRubble;
                        cost = 2;
                        
                        break;
                        
                    }
                with(tempTerrain){
                    instance_destroy();
                }
            }
        }
    */
    //Mark the Nodes to which we can move the characters before beginning battle
    for (xx=0;xx&lt;2;xx+=1){
        for(yy=0;yy&lt;mapHeight;yy+=1){
            instance_create(map[xx,yy].x,map[xx,yy].y,oNodeMove);
        }
    }
    State = "Pause";
        
        
    
    break;
    
    case "Pause":
    
    if keyboard_check_pressed(ord("M")){
        with oNodeMove{
            instance_destroy();
        }
        oCursor.State = "Battle";
        GraceTime = false;
        State = "Ready";
        with oActor{
            State = "Idle";
        }
        with oAi{
            State = "Idle";
        }
    
    }
    
    
    
    break;
    
    case "Ready":
        if Players &lt;= 0{
            if State != "Victory"{
                oSpotlight.State = "Deactivate";
               oCursor.Deactive = true;
               State = "GameOver";
               with oAi{
                State = "Deactive";
               }
               
            }
        }   
        if EncounterSize &lt;= 0{
            State = "Victory";
            with oActor
            {
                State = "Paused";
            }
            //Figure out which encounter should be disabled, so that it wont spawn again
            ExitingAnEncounter();
        }
    break;
    
    case "GameOver":
            if TimeTillTheGameOverFadeOutBegins &gt; 0{
                TimeTillTheGameOverFadeOutBegins -= DELTA_TIME;
            }else if TimeSinceEveryCharacterDied &lt; TimeTheFadeOutWillTake and TimeTillTheGameOverFadeOutBegins &lt;= 0{
                TimeSinceEveryCharacterDied += DELTA_TIME;
                FadeOutAlpha = TimeSinceEveryCharacterDied/TimeTheFadeOutWillTake;
                if TimeSinceEveryCharacterDied &gt;= TimeTheFadeOutWillTake{
                    GameOverText = true;
                }
            }
            
            if GameOverText{
                if keyboard_check_pressed(vk_enter){
                    switch ButtonSelected{
                        case 0:
                            ResetoGame();
                            room_goto(rMenu);
                        break;
                        
                        case 1:
                            SaveSoundOptions();
                            game_end();
                        break;
                    }
                }
                if keyboard_check_pressed(vk_up){
                    if ButtonSelected &lt;= 0{
                        ButtonSelected = Buttons;
                    }else{
                        ButtonSelected -= 1;
                    }
                
                }else if keyboard_check_pressed(vk_down){
                    if ButtonSelected &gt;= Buttons{
                        ButtonSelected = 0;
                    
                    }else{
                        ButtonSelected += 1;    
                    }
                }
                
                
            }
          
    break;
    
}

/*
//If we've killed all enemies
if EnemyNumbers &lt;= 0{
    with oActor{
        State = "Victory";
    }
    //Wait for all the animations to finish
    if instance_number(oAnimations) &lt;= 0{
        
        //Check which overworld encounter table we should access
        if  oGame.OverworldEncounter[0, 0] = oGame.OverworldRoom{
            oGame.OverworldEncounter[EncounterNumber, 0] = false;
        }else if oGame.Overworld2Encounter[0,0] = oGame.OverworldRoom{
            oGame.OverworldEncounter[EncounterNumber,0] = false;
        }
        //Move back to the room we came from.
        room_goto(oGame.OverworldRoom);
        //Make oGames state initialize so it can spawn the player and all relevant encounter into the room.
        oGame.State = "Initialize";
        //Reset the battleprep object, so we can start another encounter after this one.
        ResetBattlePrep();
    }
}
*/






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if State = "GameOver"{
    if FadeOutAlpha &gt; 1{
        FadeOutAlpha = 1;
    }
    draw_set_color(c_black);
    draw_set_alpha(FadeOutAlpha);
    draw_rectangle(0,0,room_width,room_height,false);
    draw_set_alpha(1);

    if GameOverText = true{
        draw_set_color(c_white);
        draw_set_font(fPlaceHolderTitle);
        TextToWrite = "Game Over";
        draw_text((room_width/2)-string_width(TextToWrite)/2, 350-string_height(TextToWrite),TextToWrite);
        Button0Active = false;
        Button1Active = false;
        
        switch(ButtonSelected){
            case 0:
                Button0Active = true;        
            break;
            
            case 1:
                Button1Active = true;
            break;
        
        }
            
        draw_sprite(sMenu,Button0Active,room_width/2,450);
        
        draw_sprite(sInGameExit,Button1Active,room_width/2, 550);
        
    }

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
