<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gridX = 0;
gridY = 0;

owner = noone;
target = noone;
hierX = 0;
hierY = 0;

stopX = 0;
stopY = 0;
fallX = 0;
fallY = 0;
midY = 0;
midX = 0;


Timer = 0;

TimeUp = 2;

fallinDown = 1;
fallinTimer = 0;

state = "Start";


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch state
{
    case "Goin":
        target.State = "DontMoveBucko";
        hierX = target.gridX;
        hierY = target.gridY;
        stopY = target.y;
        x = target.x;
        map[target.gridX,target.gridY].occupant = noone;
        state = "Up";
    break;

    case "Up":
        if target != noone &amp;&amp; owner != noone
        {
            target.y = owner.y;

            y = target.y;
            
        }
        
    break;
    
    case "Wait":
        Timer += DELTA_TIME;
        if (Timer &gt;= TimeUp)
        {
            state = "Down";
        }
    break;
    
    case "Down":
        fallY = y;
        midY = y + (stopY-fallY)/2;
        state = "Fall";
    break;
    
    case "Fall":
        fallinTimer += DELTA_TIME;
        y = MoveInBezierCurve(fallinTimer/fallinDown, fallY, midY, stopY);
        
        if(fallinTimer &gt;= fallinDown)
        {
            state = "Quit";
        }
    break;
    
    case "Quit":
        if map[target.gridX,target.gridY].occupant = noone
        {
            map[target.gridX,target.gridY].occupant = target;
            target.State = "Idle";
        }
        else
        {
            map[target.gridX,target.gridY].occupant.Damage = 999;
            map[target.gridX,target.gridY].occupant.Shake = true;
            map[target.gridX,target.gridY].occupant.SpriteShakeAmount = 10;
            map[target.gridX,target.gridY].occupant.ShakeTime = 0;
            map[target.gridX,target.gridY].occupant = target;
            target.State = "Idle";
        }
        target.Damage = 10;
        target.Shake = true;
        target.SpriteShakeAmount = 10;
        target.ShakeTime = 0;
        instance_destroy();
    break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
