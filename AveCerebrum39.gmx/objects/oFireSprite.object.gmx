<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gridX = 0;
gridY = 0;

MovementTimer = 1;
MovementTime = 1;

MoveSpeed = 250*DELTA_TIME;

Target = noone;

DestinationX = 0;
DestinationY = 0;

State = "Creation";
image_speed = AnimationSpeed;

Timer = 0;
PossibleTiles = 0;

for(i=0;i&lt;9;i+=1){
    MoveTiles[i] = noone;

}
TargetTile = noone;
Creation = sFireSpriteCreation;
Idle = sFireSprite;
Destruction = sFireSpriteDestruction;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch State{
    case "Creation":
        if sprite_index != Creation{
            sprite_index = Creation;
            image_index = 0;
            Timer = 0;
            AnimationTime = image_number*DELTA_TIME/image_speed;
        }
        Timer += DELTA_TIME;
        if Timer &gt;= AnimationTime{
            sprite_index = Idle;
            State = "Idle";
        }
    break;    

    case "Idle":
        Occupant = map[gridX,gridY].occupant;
        
        if instance_exists(Occupant) and Occupant.Owner = "Player"{
            //Damage the actor and fizzle out
            GiveDamage(Occupant,4,5);
            State = "Fizzle";
        }
        
        if gridX = 0{
            State = "Fizzle";
        }
    
    
    break;

    case "Decide":
        FirespriteDecideMovement();
    
    break;
    
    case "Move":
        direction = point_direction(x,y,DestinationX,DestinationY);
        FlightTime = point_distance(x,y,DestinationX,DestinationY)*DELTA_TIME/MoveSpeed;
        speed = MoveSpeed;
        State = "Moving";
        
    break;
    
    case "Moving":
        FlightTime -= DELTA_TIME;
        
        if FlightTime &lt;= 0{
            speed = 0;
            x = TargetTile.x;
            y = TargetTile.y;
            gridX = TargetTile.gridX;
            gridY = TargetTile.gridY;
            TargetTile = noone;
            State = "Idle";
            MovementTimer = MovementTime;
        }
        
    
    break;
    
    
    
    case "Fizzle":
        if sprite_index != Destruction{
            sprite_index = Destruction;
            image_index = 0;
            Timer = 0;
            AnimationTime = image_number*DELTA_TIME/image_speed;
        
        }
        Timer += DELTA_TIME;
        if Timer &gt;= AnimationTime{
            instance_destroy();
        }
    
    break;

}

MovementTimer -= DELTA_TIME;

if MovementTimer &lt;= 0 and State = "Idle"{
    State = "Decide";
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
