<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sGhostCreation</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>oAi</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>InitializeAi("Enemy", "Crow", "Melee", sMagpieAttack, sGhost, sGhostDeath,sGhostPossession,sGhostPossessSuccess,sGhostPossessFail,sBlank,sBlank,true,sGhost);

InitializeAISound(sndBlank,sndBlank,sndBlank,sndBlank);

InitializeAIStats(3, 0, 0, 0, 10, 3);


//InitializeAIAbilities(oStunBlastAI,sMagpieAttack,20);

//AI Stuff
Target = noone;
Assess = false;
//Attack timer is the time the AI waits between attacks.
AttackTimer = 12/(0.50*Speed);
//MovementTimer is the time the AI waits between moving one tile.
MovementTimer = 6/(0.50*Speed);


//oGhost specific variables
CreationPortal = noone;
PossessionTarget = noone;
AbilityReady = true;
EnemyInFront = false;

//AttackTime = BaseAttackTime/(0.25*Speed)
AttackTime = 12/(0.50*Speed);
//MovementTime = BaseMovementTime / (0.5*Speed);
MovementTime = 8/(0.5*Speed);

TargetTile = noone;

Destination = noone;

EnemiesOnRow = false;

var i;
i = 0;
repeat(4){
    ThreatCandidates[i] = noone;
    i += 1;
}
//

ModHP = 0;
ModMAttack = 0;
ModSAttack = 0;
ModRAttack = 0;
ModSpeed   = 0;
ModAP      = 0;
ModCritStr = 0;

TargetXPositionDifference = 0;
TargetYPositionDifference = 0;

AbilityDir = "Left";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(State){
    
    //Decide which player character is our target, so you can approach enemies/get on the same y level as enemies to shoot them.
    case"Assess":
        //Decide who we are targeting
        oGhostSelectTarget();
        oGhostSelectTargetTile();
        if instance_exists(TargetTile){
            //If we're still on the same tile as the portal which summoned us, move one tile where ever we're able and then start moving normally
            AIPathfinding();
            AIMoving();
            MovementTimer = MovementTime;
        }else{
            MovementTimer = MovementTime;
            State = "Idle";
        }
        
    break;
    //Decide which way to move inorder to get to the most ideal placement to attack our target.
    case"Decide":
        
        
    break;
    
    case"Move":

    break;
    
    
    case"Attack":
        Possess();
    break;
    
    case"Possession":
        x = PossessionTarget.x;
        y = PossessionTarget.y;
        //If we've successfully possessed someone, then play the PossessionSuccess animation on our possession target and inflict possession on them and destroy ourselves
        if sprite_index != Ability2Animation{
            GiveDamage(PossessionTarget,1,5);
            sprite_index = Ability2Animation;
            image_index = 0;
            AnimationTime = image_number*DELTA_TIME/image_speed;
            Timer = 0;
        }
        Timer += DELTA_TIME;
        
        if Timer &gt;= AnimationTime{
            instance_create(x,y,oPossessedText);
            Possession = instance_create(x,y,oPossession);
            Possession.Owner = PossessionTarget;
            instance_destroy();
        }
    break;
    
    case"Return":
        AttackReturnAnimAI();
        PossessionTarget = noone;
    break;

    case"Stunned":
    if sprite_index != Stunned{
        sprite_index = Stunned;
    }
    StunDuration -= DELTA_TIME;
    MovementTimer = MovementTime;
    AttackTimer = AttackTime;
    
    if StunDuration &lt;= 0{
        State = "Idle";
    
    
    } 
    
    break;
    
    
    case"Dead":
        if sprite_index != DeathAnimation{
            sprite_index = DeathAnimation;
            image_index = 0;
            AnimationTime = image_number*DELTA_TIME/image_speed;
            Timer = 0;
        }
        Timer += DELTA_TIME;
        
        if Timer &gt;= AnimationTime{
            map[gridX,gridY].occupant = noone;
            instance_destroy();
        }
    break;
    
    case"Deactive":
        AttackTimer = 10;
        MovementTimer = 10;
    
    
    break;
    
    case"Pause":
        GamePausedAI();
    break;
    
    case"Paused":
        image_index = AnimationFrame;
        
    break;
    
    case"UseAbility":
        Possess();
    break;
    
    case"Unpause":
        image_index = AnimationFrame;
        Timer = PreviousTimer;
        AttackTimer = AttackTimerPaused;
        MovementTimer = MovementTimerPaused;
        State = PreviousState;
        AbilityCooldown = AbilityCooldownPaused;
    break;
}


AbilityReady = true;
if instance_exists(Target) and State = "Idle"{
    //If the target is to the left of us
    if Target.gridX-gridX = 1 and Target.gridY-gridY = 0{
        AbilityDir = "Right";
        State = "UseAbility";
    }else if Target.gridX-gridX = -1 and Target.gridY-gridY = 0{
        AbilityDir = "Left";
        State = "UseAbility";
    }
    else if Target.gridX-gridX = 0 and Target.gridY-gridY = 1{
        AbilityDir = "Down";
        State = "UseAbility";
    }
    else if Target.gridX-gridX = 0 and Target.gridY-gridY = -1{
        AbilityDir = "Up";
        State = "UseAbility";
    }
}



//Reduces the different timers that dictate when the AI can move, attack and use abilities.
MovementTimer -= DELTA_TIME
if MovementTimer &lt;= 0 and State = "Idle"{
    State = "Assess";
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
