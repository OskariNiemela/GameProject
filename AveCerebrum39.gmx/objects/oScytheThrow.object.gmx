<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sScytheThrowMask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gridY = 0;
gridX = 0;

Owner = noone;

Ready = false;

sprite_index = sScytheThrow;
ReturnAnimation = sFearScytheReturn;
image_speed = AnimationSpeed;
//if we've not flown 4 tiles forward;
FlyForward = true;

//The distance we fly forward;
FlightAmount = 4.5*80;

FlightDirection = -1

FlightSpeed = 240*DELTA_TIME;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(Owner){
    //If we've not set our flightpath yet
    if Ready = false{
        gridX = Owner.gridX;
        gridY = Owner.gridY;
        x = map[gridX,gridY].x;
        y = map[gridX,gridY].y;
        //Keep in mind our original coordinates so we can return to them.
        OriginalX = x;
        OriginalY = y;
        DestinationX = OriginalX + (FlightAmount*FlightDirection);
        Ready = true;
    
    }
     //if we have set a flightpath and are ready to launch
    if Ready{
        //If we've not yet reached the distance we are intended to fly
        if FlyForward{
            //Fly toward our intended flight direction
            x += FlightDirection*FlightSpeed;
            //Keep track of how much we still have to fly
            FlightAmount -= FlightSpeed;
            //If in the next frame we would have reached our destination with our current speed.
            if abs(x-DestinationX) &lt; abs(FlightSpeed){
                FlightDirection = FlightDirection*-1;
                x = DestinationX;
                //begin our flight back toward our owner
                FlyForward = false;
            } 
        }else{
            //Fly back toward our owner
            x += FlightDirection*FlightSpeed;
            //If we would reach our owner in the next frame with our current speed
            if abs(OriginalX-x) &lt;= FlightSpeed{
                //let our owner know that we've come back 
                if Owner.State != "Dead"{
                    Owner.State = "Return";
                    Owner.ReturningAnimation = sFearScytheReturn;
                
                }
            
                //Destroy our instance 
                instance_destroy();
            
            }
        }
    
    
    }
    //Check if we're on top of a node
    NodeOnTopOf = instance_place(x,y,oNode);
    //If we are on top of a node
    if instance_exists(NodeOnTopOf){
        //Declare local variables
        var NeighbourList, i, End, Neighbor;
        NeighbourList = NodeOnTopOf.neighbors;
        i = 0;
        End = ds_list_size(NodeOnTopOf.neighbors);
        //Check the nodes neighbours and damage any actor standing on those nodes that is not our owner.
        if instance_exists(NodeOnTopOf.occupant) and NodeOnTopOf.occupant != Owner and NodeOnTopOf.occupant.CanTakeDamage {
                if NodeOnTopOf.occupant.StopAbilities{
                    NodeOnTopOf.occupant.State = "Disentigrate";
                    FlyForward = false;
                    FlightDirection = FlightDirection*-1;
                }
                //Damage the occupant 
                GiveDamage(NodeOnTopOf.occupant,6,8)
                //CanTakeDamage is a variable that stops attacks from inflicting damage on every frame(resulting in a insta death), when CanTakeDamage is false a counter starts to tick down in the targets step event and once it has hit zero they can be hit again (the target doesnt take damage from our AoE during this time, but normal attack can still damage them).
                NodeOnTopOf.occupant.CanTakeDamage = false;
        }
        repeat(End){
           Neighbor = ds_list_find_value(NeighbourList,i);
           if instance_exists(Neighbor.occupant) and Neighbor.occupant != Owner and Neighbor.occupant.CanTakeDamage{
                if Neighbor.occupant.StopAbilities{
                    Neighbor.occupant.State = "Disentigrate";
                    FlyForward = false;
                    FlightDirection = FlightDirection*-1;
                }else{
                    GiveDamage(Neighbor.occupant,3,5);
                    Neighbor.occupant.CanTakeDamage = false;
                }
           }
           i += 1;
        }
            //Go through the neighbor list and damage all the non owner actors in them.
        }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
