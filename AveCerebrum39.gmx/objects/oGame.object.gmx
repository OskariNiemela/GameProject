<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//-----------------------Lots of variables-----------------------------------------------
PlayerSprite = sPlayer64DownIdle;
//Player stats, equipment and party


Seconds = 0;
Minutes = 0;
Hours = 0;
//Game time in seconds
GameTimeTotal = 0;

enum TextTypes
{
    text,
    dialogue,
    description

}

enum states
{
    Idle,
    Attack,
    Return,
    Ability,
    AbilityAnim,
    Dead,
    Victory,
    Targeting,
    TargetedAbility,
    AbilityReturns,
    Resurrected,
    Stunned,
    Pause,
    Unpause,
    Resurrect,
    Assess,
    Deactive,
    ChoosePattern,
    ExecutePattern,
    PatternAdvance,
    CheckAbility,
    Summon,
    Return,
    Waiting,
    Dash,
    Punch,
    GoBack,
    Jumping,
    JumpTo,
    Powerbomb,
    Powering,
    Bombing,
    Jumpsmash,
    Smash,
    WaitingReturn,
    FlipTable,
    Event
    
}


var value;
value = states.Idle;
//PlayerParty

PlayerParty2 = ds_map_create();

ability = ds_list_create();

ability[| 0] = oShotgun;
ability[| 1] = oFireball;
ability[| 2] = oStunGrenade;


guyArr = ds_list_create();
guyArr[| 0] = ability;

allAbilities = ds_list_create();

allAbilities[| 0] = oFireball;
allAbilities[| 1] = oShotgun;
allAbilities[| 2] = oStunGrenade;

guyArr[| 1] = allAbilities;


PlayerParty2[? oBert] = guyArr;

ability = ds_list_create();

ability[| 0] = oShield;
ability[| 1] = oPush;
ability[| 2] = oRootings;


guyArr = ds_list_create();
guyArr[| 0] = ability;

allAbilities = ds_list_create();

allAbilities[| 0] = oShield;
allAbilities[| 1] = oPush;
allAbilities[| 2] = oRootings;

guyArr[| 1] = allAbilities;


PlayerParty2[? oPride] = guyArr;

ability = ds_list_create();

ability[| 0] = oHeal;
ability[| 1] = oKnockback;
ability[| 2] = oHaste;


guyArr = ds_list_create();
guyArr[| 0] = ability;


allAbilities = ds_list_create();

allAbilities[| 0] = oHeal;
allAbilities[| 1] = oKnockback;
allAbilities[| 2] = oHaste;

guyArr[| 1] = allAbilities;

PlayerParty2[? oPlayerBattle] = guyArr;

ShowPlayer[0] = true;
ShowPlayer[1] = false;
ShowPlayer[2] = false;
ShowPlayer[3] = false;

PlayerParty[0, 0] = oBert;
// X position
PlayerParty[0, 1] = 0;
//Y position
PlayerParty[0, 2] = 2;

PlayerParty[1, 0] = oPlayerBattle;
PlayerParty[1, 1] = 0;
PlayerParty[1, 2] = 3;

PlayerParty[2, 0] = oPride;
PlayerParty[2, 1] = 0;
PlayerParty[2, 2] = 4;

PlayerParty[3, 0] = noone;
PlayerParty[3, 1] = 0;
PlayerParty[3, 2] = 5;

//Stores all the values needed to display all the partymembers information in the ingame party screen
//Whether or not theyre in the party yet.
InitializePartyData();

//Different Encounter rooms for different overworld rooms
OverWorldRooms[0] = rDirtroad;
OverWorldRooms[1] = rCityBattle;

EventParser();

global.textEffectsMap = ds_map_create();

ds_map_add(global.textEffectsMap,"test",oTestText);

//Spawning flags
//[x,0] = spawn or not
//[x,1] = object we wish to spawn
//[x,2] = x coordinate
//[x,3] = y coordinate
rCabinInTheWoodsEncounters();
rForestEncounters();
rJunkyardEncounters();
rCabinInteriorEncounters();
rMayorOfficeEncounters();
rWarehouseEncounters();
rTownCentreEncounters();
rOutsideWarehouseEncounters();
rWarehouseOutsideEncounters();

//DataStructures
encounters_accessor = ds_map_create();
ds_map_add(encounters_accessor,rCabinInTheWoods,CabinInTheWoodsEncounter);
ds_map_add(encounters_accessor,rForest,ForestEncounter);
ds_map_add(encounters_accessor,rJunkyard,rJunkyardEncounter);
ds_map_add(encounters_accessor,rCabinInterior,rCabinInteriorEncounter);
ds_map_add(encounters_accessor,rOffice,rOfficeEnc);
ds_map_add(encounters_accessor,rWarehouse0,WarehouseEncounters);
ds_map_add(encounters_accessor,rTownCentre,TownCentreEncounters);
ds_map_add(encounters_accessor,rTownCentreRight,OutsideWarehouseEncounters);
ds_map_add(encounters_accessor,rWarehouseOutside,WarehouseOutsideEncounters);
var Map;
Map = ds_map_find_first(encounters_accessor);
EncountersMapList[0] = Map;
for(i=1; i&lt;ds_map_size(encounters_accessor); i+=1){
    Map = ds_map_find_next(encounters_accessor,Map)
    EncountersMapList[i] = Map
}

//Abilities and their toolbar icons


//RoomTransitionStuff
FadeAlpha = 0;
RoomToFadeTo = noone;
FadeTime = 0.5;
FadeTimer = 0;
Zoomin = true;
View_Height_Old = 0;
View_Width_Old = 0;
View_Angle_Old = 0;
Zoom = 1;


//Variables related to sound
SoundCutOff = false;

//--------------------------------------------------------------------------------------------






MapSize = "None";
OverworldRoom = noone;

ResetEncounters();

State = "InMenu";

OverworldPosX = 640;
OverworldPosY = 700;

PlayerSpawned = false;
ContinueMusic = false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.SecondsPassedThisFrame = delta_time/1000000;

switch(State){
    case"Initialize":
        var EnemyToSpawn, SpawnX, SpawnY;
        if SoundCutOff or ContinueMusic = false{
            oBackgroundMusic.State = "ComingIntoARoom";
        }
        //Check which encounter table we're using.
        if ds_map_exists(encounters_accessor,room){
            var Encounter, Encounters, EncounterInstance;
            Encounter = encounters_accessor[? room];
            Encounters = array_height_2d(Encounter);
            b = 0
            for(b=0;b&lt;Encounters;b+=1){
            //If we havent encountered this enemy yet.
                if Encounter[b, 0]{
                    EnemyToSpawn = Encounter[b, 1];
                    SpawnX = Encounter[b, 2];
                    SpawnY = Encounter[b, 3];
                    EncounterInstance = instance_create(SpawnX, SpawnY, EnemyToSpawn)
                    if(instance_exists(EncounterInstance))
                    {
                        EncounterInstance.EncounterNumber = b;
                    }
                    
                        
                }

            }
        
        }
        FadeAlpha = 1;

        Player = instance_create(OverworldPosX, OverworldPosY,oPlayerWorld);
        Player.sprite_index = PlayerSprite;
        Player.State = "Fading";
        State = "FadingIn";
    break;

    case"FadingOut":
        
        if SoundCutOff{
            oBackgroundMusic.State = "RoomTransition";
            oBackgroundMusic.RoomToGoTo = RoomToFadeTo
            oBackgroundMusic.SoundCutOff = true;
            oBackgroundMusic.ContinueMusic = false;
        }else if ContinueMusic{
            oBackgroundMusic.ContinueMusic = true;
        }
        FadeTimer += DELTA_TIME;
        FadeAlpha = FadeTimer/FadeTime;
        if FadeTimer &gt;= FadeTime{
            FadeTimer = FadeTime;
            TransferRooms(RoomToFadeTo,OverworldPosX,OverworldPosY);
        }
    
    break;
    
    case"FadingIn":
        if SoundCutOff{
            oBackgroundMusic.State = "ComingIntoARoom"
            SoundCutOff = false
        }
        FadeTimer -= DELTA_TIME;
        FadeAlpha = FadeTimer/FadeTime;
        if FadeTimer &lt;= 0{
            FadeTimer = 0;
            State = "Overworld";
            Player.State = "Idle";
            RoomToFadeTo = noone;
            SoundCutOff = false
        }
    
    break;

    case"TransferIntoBattle":
        if Zoomin = true{
            oBackgroundMusic.State = "RoomTransition";
            View_Height_Old = view_hview;
            View_Width_Old = view_wview;
            View_Angle_Old = view_angle;
            Zoomin = false;
        
        }
        Zoom -= 1.5*DELTA_TIME;
        view_hview[0] = View_Height_Old * Zoom;
        view_wview[0] = View_Width_Old * Zoom;
        view_angle += 40*DELTA_TIME;
        FadeTimer += DELTA_TIME;
        FadeAlpha = FadeTimer/FadeTime;
        if FadeTimer &gt;= FadeTime{
            var Sprite;
            Sprite = oPlayerWorld.sprite_index;
            
            switch Sprite{
                case sPlayer64Right:
                case sPlayer64RightIdle:
                    oGame.PlayerSprite = sPlayer64RightIdle;
                break;
            
                case sPlayer64Left:
                case sPlayer64LeftIdle:
                    oGame.PlayerSprite = sPlayer64LeftIdle;
                break;
                
                case sPlayer64Up:
                case sPlayer64UpIdle:
                    oGame.PlayerSprite = sPlayer64UpIdle;
                break;
                
                case sPlayer64Down:
                case sPlayer64DownIdle:
                    oGame.PlayerSprite = sPlayer64DownIdle;
                break;
                
                default:
                    oGame.PlayerSprite = sPlayer64RightIdle;
                break;
            }
            PlayerSprite = oPlayerWorld.sprite_index;
            oBackgroundMusic.RoomToGoTo = RoomToFadeTo;
            oBackgroundMusic.State = "BattleTransition";
            FadeTimer = FadeTime;
            BattleTransition(RoomToFadeTo);
            RoomToFadeTo = noone;
            State = "InBattleFade";
        }
    
    break;
    
    case"InBattleFade":
        FadeTimer -= DELTA_TIME;
        FadeAlpha = FadeTimer/FadeTime;
        
        if FadeTimer &lt;= 0{
            FadeTimer = 0;
            State = "Battle";
            Zoomin = true;
            Zoom = 1;
        
        }

    break;
    
    
    case "Overworld":
        if keyboard_check_pressed(ord("P"))and oPlayerWorld.State = "Idle"{
            State = "Paused";
            with oPlayerWorld{
                State = "Paused";
            }
            with instance_create(x,y,oInGameMenu){
                State = "InMenu";
            }
        
        }

        
    
    break;
    
    case "Paused":
    
    break;
    
    case"Battle":
        if keyboard_check_pressed(ord("P")){
            State = "PausedBattle";
            instance_deactivate_all(true);
            instance_activate_object(oBackgroundMusic);
            instance_activate_object(oSFX);
            with instance_create(x,y,oInGameMenu){
                State = "InBattleMenu";
            }
            
        }
    
    break;
    
    case"PauseBattle":
    //Pauses all the animation/timers and goes to the pause menu
    
    
    break; 
    
    case"UnpauseBattle":
    //Unpause everyone.
        instance_activate_all();
        State = "Battle";
    break;
    
    case "UnpauseOverworld":
        with oPlayerWorld{
            State = "Idle";
        }
        State = "Overworld";
    
    break;
}
//Count in game time.
Seconds += DELTA_TIME;


if Seconds &gt;= 60{
    Minutes += 1;
    Seconds -= 60;
    if Minutes &gt;= 60{
        Hours += 1;
        Minutes -= 60;
    }
}



//Change audio gain(s) (Volume)
//If we press U, lessen the gain of SFX











</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if State = "FadingOut"{
    draw_set_alpha(FadeAlpha);
    draw_set_color(c_black);
    draw_rectangle(0,0,room_width,room_height,false);
    draw_set_alpha(1);

}else if State ="FadingIn"{
    draw_set_alpha(FadeAlpha);
    draw_set_color(c_black);
    draw_rectangle(0,0,room_width,room_height,false);
    draw_set_alpha(1);
    
}else if State = "Initialize"{
    draw_set_alpha(FadeAlpha);
    draw_rectangle(0,0,room_width,room_height,false);
    
}else if State = "TransferIntoBattle"{
    draw_set_alpha(FadeAlpha);
    draw_set_color(c_black);
    draw_rectangle(0,0,room_width,room_height,false);
    draw_set_alpha(1);
    
}else if State = "InBattleFade"{
    draw_set_alpha(FadeAlpha);
    draw_set_color(c_black);
    draw_rectangle(0,0,room_width,room_height,false);
    draw_set_alpha(1);


}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_text(1920/2,1080/2,State);
/*if State = "FadingOut"{
    draw_set_alpha(FadeAlpha);
    draw_set_color(c_black);
    draw_rectangle(0,0,room_width,room_height,false);
    draw_set_alpha(1);

}else if State ="FadingIn"{
    draw_set_alpha(FadeAlpha);
    draw_set_color(c_black);
    draw_rectangle(0,0,room_width,room_height,false);
    draw_set_alpha(1);
    
}else if State = "Initialize"{
    draw_set_alpha(FadeAlpha);
    draw_rectangle(0,0,room_width,room_height,false);
    
}else if State = "TransferIntoBattle"{
    draw_set_alpha(FadeAlpha);
    draw_set_color(c_black);
    draw_rectangle(0,0,room_width,room_height,false);
    draw_set_alpha(1);
    
}else if State = "InBattleFade"{
    draw_set_alpha(FadeAlpha);
    draw_set_color(c_black);
    draw_rectangle(0,0,room_width,room_height,false);
    draw_set_alpha(1);


}*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
