<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sRustySink</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oStuff</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>InitializeStuff(oRustySinkMask,true);
TextBox[0] = "A";
State = "Idling";
AnimTimer = 0;
SoundTimer = 0;
Depth = true
SinkSounds = audio_emitter_create();
audio_emitter_position(SinkSounds,x,y,0);
IdleAnim = sRustySink;
OpenAnim = sRustySinkOpen;
CloseAnim = sRustySinkClose;
IdleOpen = sRustySinkOpenIdle;

sndOpen = sndSinkOpen;
sndLoop = sndSinkLoop;
sndClose= sndSinkClosed;

LoopStarted = false;
LoopStartTime = 1.00;

AnimationTime = 0;

SinkStarted = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch State{
    case "Talk":
     oPlayerWorld.State = "Idle";
        switch SinkStarted{
            //If the sink is already on
            case true:  
                
                if audio_is_playing(sndOpen){
                    audio_stop_sound(sndOpen);
                }
                if audio_is_playing(sndLoop){
                    audio_stop_sound(sndLoop);
                }
                SinkStarted = false;
                AnimTimer = 0;
                SoundTimer = 0;
                State = "Close";
            
            break;
            //If the sink is being turned on
            case false:
                    SinkStarted = true;
                    State = "Open";
            break;
        }
       
        
    break;
    
    case "Open":
        if sprite_index != OpenAnim{       
            audio_play_sound_on(SinkSounds,sndOpen,false,10);
            image_index = 0;
            SoundTimer = 0;
            AnimTimer = 0;
            image_speed = 8*DELTA_TIME
            sprite_index = OpenAnim;
            AnimationTime = image_number*DELTA_TIME/image_speed;
        }
        AnimTimer += DELTA_TIME;
        if AnimTimer &gt;= AnimationTime{
            image_index = 0;
            sprite_index = IdleOpen;
            State = "Idle";
        }
    
    break;
    
    case "Close":
        if sprite_index != CloseAnim{
            audio_play_sound_on(SinkSounds,sndClose,false,10);
            sprite_index = CloseAnim;
            AnimTimer = 0;
            image_index = 0;
            image_speed = 8*DELTA_TIME
            AnimationTime = image_number*DELTA_TIME/image_speed;
        }
        AnimTimer += DELTA_TIME;
        if AnimTimer &gt;= AnimationTime{
            image_speed = 0;
            image_index = 0;
            sprite_index = IdleAnim;
            State = "Idle";   
        }
    break;
}
if SinkStarted{
    SoundTimer += DELTA_TIME;
    if SoundTimer &gt;= LoopStartTime{
        audio_play_sound_on(SinkSounds,sndLoop,false,10);
        SoundTimer = 0;
    }
}

if Depth {
    depth = 60/(y/20);

}else{
    depth = 1000;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,image_index,round(x),round(y),1,1,image_angle,c_white,image_alpha);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
