<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>200</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>oCursor</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>PlayerCharacters = 2;

Margin = 10;
MarginToolbar = 16;

Deactive = false;

CurrentNode = noone;

SelectedActor = 0;
SelectedCharacter = noone;

MapWidth = (oBattleScreen.mapWidth-1);
MapHeight= (oBattleScreen.mapHeight-1);

PartySize = array_length_1d(oBattleScreen.PlayerCharacters);

TeamAbilityReady = false;

AbilityIcon[0] = noone;
AbilityIcon[1] = noone;

view_width = view_wview[0];
view_height = view_hview[0];

var i;
i = 0;
repeat PartySize{
    Party[i] = oBattleScreen.PlayerCharacters[i,0];
    if instance_exists(Party[i]){
        Party[i].PartyNumber = i;
    
    }
    i += 1;

}

State = "BattlePause";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>


if Deactive = false{
    switch State{
        case "Battle":
            //If the party has noone in the currently selected slot, then automatically either loop back to the beginning of the roster(if we have no more slots to go to) or go to the next slot in line
            Loops = 0;
            while Party[SelectedActor] = noone and Loops &lt;= 3{
                if (SelectedActor+1) &gt; (PartySize-1){
                    SelectedActor = 0;
                }else{
                    SelectedActor += 1;
                }
                Loops += 1;
            }
            
            //by pressing space on the keyboard the cursor shuffles through the available party
            if keyboard_check_pressed(vk_space){
                if instance_exists(Party[SelectedActor])
                {
                    ClearOrder(Party[SelectedActor]);
                }
            
            }
            /*                              Hotkeys                                                               */
            
            if keyboard_check_pressed(ord("A")) and Party[SelectedActor] != noone and Party[SelectedActor] != oTorso{
                GivOrder(Party[SelectedActor],"Attack");
            }
            
            if keyboard_check_pressed(ord("S")) and Party[SelectedActor] != noone and Party[SelectedActor] != oTorso and Party[SelectedActor].AbilitiesLockedOut[0] = false{
                GivOrder(Party[SelectedActor],1);
            }
            
            if keyboard_check_pressed(ord("D")) and Party[SelectedActor] != noone and Party[SelectedActor] != oTorso and Party[SelectedActor].AbilitiesLockedOut[1] = false{
                GivOrder(Party[SelectedActor],2);
            }
            if keyboard_check_pressed(ord("F")) and Party[SelectedActor] != noone and Party[SelectedActor] != oTorso and Party[SelectedActor].AbilitiesLockedOut[2] = false{
                GivOrder(Party[SelectedActor],3);
            }
            
            if keyboard_check_pressed(ord("X")) and Party[SelectedActor] != noone and Party[SelectedActor] != oTorso{
                GivOrder(Party[SelectedActor],"Res");
            }
            
            if keyboard_check_pressed(ord("1")) and SelectedActor != 0{
                if  instance_exists(Party[0]){
                    SelectedActor = 0;
                    oSpotlight.CurrentlySelected = Party[SelectedActor];
                }
            }
            if keyboard_check_pressed(ord("2")) and SelectedActor != 1 and PartySize &gt;= 2{
                if instance_exists(Party[1]){
                    SelectedActor = 1;
                    oSpotlight.CurrentlySelected = Party[SelectedActor];
                }
            }
            if keyboard_check_pressed(ord("3")) and SelectedActor != 2 and PartySize &gt;= 3{
                if instance_exists(Party[2]){
                    SelectedActor = 2;
                    oSpotlight.CurrentlySelected = Party[SelectedActor];
                }
            }
            if keyboard_check_pressed(ord("4")) and SelectedActor != 3 and PartySize &gt;= 4{
                if instance_exists(Party[3]){
                    SelectedActor = 3;
                    oSpotlight.CurrentlySelected = Party[SelectedActor];
                }
            
            }
        /*                                                                                                      */    
            if instance_exists(Party[SelectedActor]){
                oSpotlight.CurrentlySelected = Party[SelectedActor];
            
            }
            
            
            
            
            //if we press up on the keyboard go up one tile.
            if keyboard_check_pressed(vk_up) and Party[SelectedActor] != noone and Party[SelectedActor].queueY &gt; 0{
                if(Party[SelectedActor].State != "Targeting")
                {
                    GivOrder(Party[SelectedActor],"Up");
                    Party[SelectedActor].queueY -= 1;
                }
                else
                {
                    Party[SelectedActor].Move = "Up";
                }
                
            }
            //If we press down go down one tile
            if keyboard_check_pressed(vk_down) and Party[SelectedActor] != noone and Party[SelectedActor].queueY &lt; MapHeight{
                if(Party[SelectedActor].State != "Targeting")
                {
                    GivOrder(Party[SelectedActor],"Down");
                    Party[SelectedActor].queueY += 1;
                }
                else
                {
                    Party[SelectedActor].Move = "Down";
                }
                
            }
            //If we press right go right one tile
            if keyboard_check_pressed(vk_right) and Party[SelectedActor] != noone and Party[SelectedActor].queueX &lt; MapWidth{
                if(Party[SelectedActor].State != "Targeting")
                {
                    GivOrder(Party[SelectedActor],"Right");
                    Party[SelectedActor].queueX += 1;
                }
                else
                {
                    Party[SelectedActor].Move = "Right";
                }
            }
            if keyboard_check_pressed(vk_left) and Party[SelectedActor] != noone and Party[SelectedActor].queueX &gt; 0{
                if(Party[SelectedActor].State != "Targeting")
                {
                    GivOrder(Party[SelectedActor],"Left");
                    Party[SelectedActor].queueX -= 1;
                }
                else
                {
                    Party[SelectedActor].Move = "Left";
                }     
            }
            
            if keyboard_check_pressed(ord("C")) and Party[SelectedActor] != noone{
                if Party[SelectedActor].State = "Resurrect" or Party[SelectedActor].State = "Targeting"{
                    with Party[SelectedActor]{
                        State = "Idle";
                        sprite_index = Idle;
                    }
                
                }
            }
            
            /*if keyboard_check_pressed(ord("I")){
                Decapitate = instance_create(x,y,oDecapitate);
                Decapitate.Owner = Party[SelectedActor];
            }*/
        break;
        
        
        
        
        
        case "BattlePause":
             //If the party has noone in the currently selected slot, then automatically either loop back to the beginning of the roster(if we have no more slots to go to) or go to the next slot in line
            Loops = 0;
            while Party[SelectedActor] = noone and Loops &lt;= 3{
                if (SelectedActor+1) &gt; (PartySize-1){
                    SelectedActor = 0;
                }else{
                    SelectedActor += 1;
                }
                Loops += 1;
            }
            
            //by pressing space on the keyboard the cursor shuffles through the available party
            if keyboard_check_pressed(vk_space){
                if (SelectedActor+1) &gt; (PartySize-1){
                    SelectedActor = 0;
                }else{
                    SelectedActor += 1;
                }
            
            }
            
            
        
            if keyboard_check_pressed(ord("1")) and SelectedActor != 0{
                if  instance_exists(Party[0]){
                    SelectedActor = 0;
                    oSpotlight.CurrentlySelected = Party[SelectedActor];
                }
            }
            if keyboard_check_pressed(ord("2")) and SelectedActor != 1 and PartySize &gt;= 2{
                if instance_exists(Party[1]){
                    SelectedActor = 1;
                    oSpotlight.CurrentlySelected = Party[SelectedActor];
                
                }
            }
            if keyboard_check_pressed(ord("3")) and SelectedActor != 2 and PartySize &gt;= 3{
                if instance_exists(Party[2]){
                    SelectedActor = 2;
                    oSpotlight.CurrentlySelected = Party[SelectedActor];
                }
            }
            if keyboard_check_pressed(ord("4")) and SelectedActor != 3 and PartySize &gt;= 4{
                if instance_exists(Party[3]){
                    SelectedActor = 3;
                    oSpotlight.CurrentlySelected = Party[SelectedActor];
                
                }
            
            }
            if instance_exists(Party[SelectedActor]){
                oSpotlight.CurrentlySelected = Party[SelectedActor];
            }
            //if we press up on the keyboard go up one tile.
            if keyboard_check_pressed(vk_up) and Party[SelectedActor] != noone and Party[SelectedActor].State = "Paused"{
                if Party[SelectedActor].gridY != 0{
                    if map[Party[SelectedActor].gridX, Party[SelectedActor].gridY-1].occupant = noone{
                        map[Party[SelectedActor].gridX, Party[SelectedActor].gridY].occupant = noone;
                        Party[SelectedActor].gridY -= 1;
                        Party[SelectedActor].queueY -=1;
                        map[Party[SelectedActor].gridX,Party[SelectedActor].gridY].occupant = Party[SelectedActor].id;
                        Party[SelectedActor].y = map[Party[SelectedActor].gridX,Party[SelectedActor].gridY].y;
                    }
                    
                }
                
            }
            //If we press down go down one tile
            if keyboard_check_pressed(vk_down) and Party[SelectedActor] != noone and Party[SelectedActor].State = "Paused"{
                if Party[SelectedActor].gridY != MapHeight{
                     if map[Party[SelectedActor].gridX, Party[SelectedActor].gridY+1].occupant = noone{
                        map[Party[SelectedActor].gridX, Party[SelectedActor].gridY].occupant = noone;
                        Party[SelectedActor].gridY += 1;
                        Party[SelectedActor].queueY +=1;
                        map[Party[SelectedActor].gridX,Party[SelectedActor].gridY].occupant = Party[SelectedActor].id;
                        Party[SelectedActor].y = map[Party[SelectedActor].gridX,Party[SelectedActor].gridY].y;
                     }
                
                }
            
            }
            //If we press right go right one tile
            if keyboard_check_pressed(vk_right) and Party[SelectedActor] != noone and Party[SelectedActor].State = "Paused"{
                if Party[SelectedActor].gridX != 1{
                     if map[Party[SelectedActor].gridX+1, Party[SelectedActor].gridY].occupant = noone{
                        map[Party[SelectedActor].gridX, Party[SelectedActor].gridY].occupant = noone;
                        Party[SelectedActor].gridX += 1;
                        Party[SelectedActor].queueX +=1;
                        map[Party[SelectedActor].gridX,Party[SelectedActor].gridY].occupant = Party[SelectedActor].id;
                        Party[SelectedActor].x = map[Party[SelectedActor].gridX,Party[SelectedActor].gridY].x;
                     }
                }
            
            
            
            }
            if keyboard_check_pressed(vk_left) and Party[SelectedActor] != noone and Party[SelectedActor].State = "Paused"{
                if Party[SelectedActor].gridX != 0{
                     if map[Party[SelectedActor].gridX-1, Party[SelectedActor].gridY].occupant = noone{
                        map[Party[SelectedActor].gridX, Party[SelectedActor].gridY].occupant = noone;
                        Party[SelectedActor].gridX -= 1;
                        Party[SelectedActor].queueX -=1;
                        map[Party[SelectedActor].gridX,Party[SelectedActor].gridY].occupant = Party[SelectedActor].id;
                        Party[SelectedActor].x = map[Party[SelectedActor].gridX,Party[SelectedActor].gridY].x;
                     }
                }
            
            
            
            }
        break;
    }
}
























</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fDefault);
draw_set_color(c_black);
if instance_exists(Party[SelectedActor]) {
    draw_text(1920/2,1080/2,string(Party[SelectedActor].gridX));
    draw_text(1920/2,980/2 ,string(Party[SelectedActor].gridY));
    draw_sprite(sNodeSelect,0,Party[SelectedActor].x,Party[SelectedActor].y);
    
    if(Party[SelectedActor].currentAction != noone)
    {
        queuePainter = Party[SelectedActor].queuePainter.drawTable;
        
        for(a = 0; a&lt;ds_list_size(queuePainter);a++)
        {
            switch queuePainter[| a]
            {
                case "Up":
                    draw_sprite(sMovementArrowUp,0,view_width*(a+1)/4,view_height-30);
                break;
                
                case "Left":
                    draw_sprite(sMovementArrowLeft,0,view_width*(a+1)/4,view_height-30);
                break;
                
                case "Down":
                    draw_sprite(sMovementArrowDown,0,view_width*(a+1)/4,view_height-30);
                break
                
                case "Right":
                    draw_sprite(sMovementArrowRight,0,view_width*(a+1)/4,view_height-30);
                break;
                
                case "Attack":
                    draw_sprite(sAttackQueue,0,view_width*(a+1)/4,view_height-30);
                break;
                
                case 1: 
                    draw_sprite(sAbilityQueue,0,view_width*(a+1)/4,view_height-30);
                break;
                
                case 2:
                    draw_sprite(sAbilityQueue,0,view_width*(a+1)/4,view_height-20);
                break;
                
                case 3:
                    draw_sprite(sAbilityQueue,0,view_width*(a+1)/4,view_height-20);
                break;
            
            
            }
            
        
            if(a&gt;=2)
            {
                break;   
            }
        }
        
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
