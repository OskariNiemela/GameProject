<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sGroundFire</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>TargetGridX = 0;
TargetGridY = 0;

State = "Check";


EffectsTime = 1;
EffectTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch State
{
    case "Check":
        //Check out the neighbors of our TargetGridX TargetGridY coordinates
        ExplodingTile = map[TargetGridX,TargetGridY];
        x = ExplodingTile.x;
        y = ExplodingTile.y;
        if instance_exists(ExplodingTile.occupant){
            var deBuff;
            deBuff = instance_create(ExplodingTile.occupant.x,ExplodingTile.occupant.y,oKnockbackDebuff);
            deBuff.Owner = ExplodingTile.occupant;
            deBuff.State = "DeBuff";
        }
        NeighborsSize = ds_list_size(map[TargetGridX,TargetGridY].neighbors);
        i = 0;
        repeat(NeighborsSize){
           Neighbor = ds_list_find_value(map[TargetGridX,TargetGridY].neighbors,i);
           if instance_exists(Neighbor.occupant){
                if Neighbor.occupant.Owner = "Enemy"{
                    var deBuff;
                    deBuff = instance_create(Neighbor.occupant.x,Neighbor.occupant.y,oKnockbackDebuff);
                    deBuff.Owner = Neighbor.occupant;
                    deBuff.State = "DeBuff";
                }
                
           }
           i++;
        }
        State = "Play";
    break;
    
    case "Play":
        EffectTimer += DELTA_TIME;
        
        if (EffectTimer&gt;=EffectsTime)
        {
            State = "End";
        }
    
    break; 
    
    case "End":
        instance_destroy();
    
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
