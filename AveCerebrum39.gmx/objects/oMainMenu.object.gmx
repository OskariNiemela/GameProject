<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = view_wview[0]/2;
y = view_hview[0]/2;

Margin = 5;

MainTitle = sMainTitle;
NewGame = sMainMenuNewGame;
LoadGame = sLoadGame;
Options = sOptions;
Quit = sMainMenuExit;

State = "MainMenu";

CurrentlySelectedButton = 0;

Menubuttons[0] = "Start";

Menubuttons[1] = "Continue";

MenuButtons[2] = "Options";

Menubuttons[3] = "Quit";

if file_exists("Player_Data.sav"){
    LoadGameEnabled = true;
}else{
    LoadGameEnabled = false;
}
//How many buttons are in the sub menus?
ButtonsInOptions = 3;

OptionsMenuMargin = view_hview[0]/3;

if LoadGameEnabled = false{
    LoadGame = sLoadGameDisable;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch State{
    case "MainMenu":
    if keyboard_check_pressed(vk_up){
        if CurrentlySelectedButton = 0{
            CurrentlySelectedButton = (array_length_1d(Menubuttons)-1);
        }else{
            CurrentlySelectedButton -= 1;
            if LoadGameEnabled = false and CurrentlySelectedButton = 1{
                CurrentlySelectedButton -= 1;
            }
        }
    }
    if keyboard_check_pressed(vk_down){
        if CurrentlySelectedButton = (array_length_1d(Menubuttons)-1){
            CurrentlySelectedButton = 0;
            
        }else{
            CurrentlySelectedButton += 1;
            if LoadGameEnabled = false and CurrentlySelectedButton = 1{
                CurrentlySelectedButton += 1;
            }
        }
    }
    
    if keyboard_check_pressed(vk_enter){
        //If we're on the new game button
        switch CurrentlySelectedButton {
            /*
            oGame.Room = rOverworld;
            oBackgroundMusic.SoundCutOff = true;
            room_goto(rOverworld);
            oGame.State = "Initialize";
            */
        // 0 = NewGame|1 = LoadGame|2 = Options|3 = Quit
        case 0:
            FadingTransitionFromRoomToRoom(rCabinInTheWoods,900,580,true,false);
        break;
            //Start a new game
        //If we have the load game button
        case 1:
            with oGame{
                LoadGameFromFile();
            }
        
        break;
        
        case 2:
            CurrentlySelectedButton = 0;
            State = "Options";
        break;
        
            //Transition to the loading screen
        //If we're on the quit game button
        case 3:
            SaveSoundOptions();
            game_end();  
        break;
        
    
        }
    }
    break;
    
    
    case "Options":
        // 0 = Music Volume | 1 = SFX volume
        if keyboard_check_pressed(vk_up){
            if CurrentlySelectedButton = 0{
                CurrentlySelectedButton = (ButtonsInOptions-1);
            }else{
                CurrentlySelectedButton -= 1;
            }
        }
        if keyboard_check_pressed(vk_down){
            if CurrentlySelectedButton = (ButtonsInOptions-1){
                CurrentlySelectedButton = 0;
            }else{
                CurrentlySelectedButton += 1;
            }
        }
        
        if keyboard_check_pressed(vk_left){
            switch CurrentlySelectedButton{
                case 0:
                    //Decrease music volume
                    DecreaseMusicVolume();
                break;
                
                
                case 1:
                    //Decrease SFX volume
                    DecreaseSFXVolume();
                
                break;
                case 2:
                
                break;
            }  
        
        
        }
        if keyboard_check_pressed(vk_right){
            switch CurrentlySelectedButton{
                case 0:
                    //Increase music volume
                    IncreaseMusicVolume();
                break;
                
                
                case 1:
                    //Increase SFX volume
                    IncreaseSFXVolume();
                
                break;
                case 2:
                
                break;
            }  
        
        
        }
        
        if keyboard_check_pressed(vk_enter){
            switch CurrentlySelectedButton{
                case 0:
                    
                
                break;
                
                
                case 1:
                    
                
                
                break;
                case 2:
                    //Return to main menu state
                    CurrentlySelectedButton = 0;
                    State = "MainMenu";
                break;
            }  
        
        
        }
        
    break;
    
    
    
    case "LoadGame":
    
    
    
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>oMainMenu</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch State{
    case "MainMenu":
        x = view_wview[0]/2;
        y = view_hview[0]/2;
        Y = view_hview[0]/6;
        CurrentY = view_hview[0]/5.8;
        draw_set_alpha(1);
        /*
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        */
        DrawTextAndUpdateCurrentY(sMainTitle,0);
        MainMenuActive = 0;
        LoadGameActive = 0;
        ExitActive = 0;
        OptionsActive = 0;
        
        CurrentY = CurrentY;
        
        if CurrentlySelectedButton = 0{
            MainMenuActive = 1;
        }
        DrawTextAndUpdateCurrentY(NewGame,MainMenuActive);
        
        if CurrentlySelectedButton = 1{
            LoadGameActive = 1;
        }
        DrawTextAndUpdateCurrentY(LoadGame,LoadGameActive);
        
        if CurrentlySelectedButton = 2{
            OptionsActive = 1;
        }
        
        DrawTextAndUpdateCurrentY(Options,OptionsActive);
        
        if CurrentlySelectedButton = 3{
            ExitActive = 1;
        }
        DrawTextAndUpdateCurrentY(Quit,ExitActive);
    break;
    
    
    case "Options":
        MusicVolumeActive = 0;
        SFXVolumeActive  = 0;
        BackButtonActive = 0;
        XHalf = view_wview[0]/2;
        X1 = view_wview[0]/4.5;
        X2 = view_wview[0]/1.75;
        y = view_hview[0]/2;
        Y = view_hview[0]/6;
        CurrentY = view_hview[0]/5.8;
        
        MusicVolume = oBackgroundMusic.AudioGain/0.05;
        SFXVolume = oSFX.SFXGain/0.05;
        
        draw_set_alpha(1);
        
        switch CurrentlySelectedButton{
            case 0:
                MusicVolumeActive = 1;
            break;
        
            case 1:
                SFXVolumeActive = 1;    
            break;
            
            case 2:
                BackButtonActive = 1;
            break;
        
        
        }
        
        //Draw the Volume selector
        OptionsMenuDrawEvent(sMusicVolume,MusicVolumeActive,X1,Y);
        //Draw the volume indicator
        var XPos;
        XPos = X2;
        draw_sprite(sVolumeBar,0,XPos,Y);
          for(i=0;i&lt;(MusicVolume);i+=1){
                draw_sprite(sVolumePip,0,XPos,Y);   
                XPos += 10;
          
          }
        Y += OptionsMenuMargin;
        
        //Draw the SFX volume selector
        OptionsMenuDrawEvent(sSFXVolume,SFXVolumeActive,X1,Y);
        //Draw the SFX volume indicator
        XPos = X2;
        draw_sprite(sVolumeBar,0,XPos,Y);
        for(i=0;i&lt;(SFXVolume);i+=1){
                draw_sprite(sVolumePip,0,XPos,Y);   
                XPos += 10;
          
          }
        
        
        
        
        Y += OptionsMenuMargin;
        
        
        OptionsMenuDrawEvent(sBack,BackButtonActive,XHalf,Y);
    break;
    
    
    case "LoadGame":
    
    
    break;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
