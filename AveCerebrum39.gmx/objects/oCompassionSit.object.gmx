<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCompassionSitDown</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>60</depth>
  <persistent>0</persistent>
  <parentName>oFriendly</parentName>
  <maskName>oFriendlyMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>OverworldCharacterInitialize(sCompassionOverworldRightWalk,sCompassionOverworldLeftWalk,sCompassionOverworldUpWalk,sCompassionOverworldDownWalk,sCompassionOverworldUp,sCompassionOverworldRight,sCompassionOverworldLeft,sCompassionOverworldDown);

triggerKey = "oComp";
if(!CheckKey(triggerKey))
{
    instance_destroy();
}

ParseTxtToDialogue("Comp");

for(i=0;i&lt;ds_list_size(Textlist);i++)
{
    DialogueChoices[i,0] = noone;
    DialogueChoices[i,1] = noone;
}
textPortrait = sCompPortrait;
OptionSelected = 0;
TextIndex = 0;
textSound = compassionTxt;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vspeed = 0;
hspeed = 0;


OverworldDepth();

switch State{
    case"Event":
        switch Event
        {
            case "Animating":
                switch AnimationTime
                {   
                    //Just do animation once and move on Â´(Info: Animation to do)
                    case 0:
                        AnimatingTime = 0;
                        Event = "Animate";
                    break;
                    
                    //Get to the end of this animation and move on to the next one (Info: AnimatingTime, AnimationtoTransitionInto)
                    case -1:
                        AnimatingTime = -1;
                        CurrentAnimTime = (image_number-image_index)*DELTA_TIME/image_speed;
                        AnimationTimer = 0;
                        Event = "TransitionAnim";
                    break;
                    
                    //Indefinite animation  (Info: animation to loop indefinetly);
                    case "!":
                        AnimatingTime = 0;
                        image_index = Animation;
                        image_speed = AnimationSpeed;
                        Event = "Loop";
                        ManagingEvent.NextOrder = true;
                    break;
                    
                    
                    //Play an animation, set Nextorder to true and play a return animation info: animation to play, return animation
                    case "=":
                        Event = "SegmentAnimation";
                    break;
                    
                    default:
                        AnimatingTime = AnimationTime*DELTA_TIME/image_speed;
                        Event = "Animate";
                    break;
                    
                } 
            
            
            break;
            
            case "SegmentAnimation":
                if(sprite_index != Animation)
                {
                    SetUpAnimation(Animation);
                }
                AnimationTimer += DELTA_TIME;
                if(AnimationTimer &gt;= AnimatingTime)
                {
                    image_index = sprite_index.image_number;
                    image_speed = 0;
                    ManagingEvent.NextOrder = true;
                    Event = "ReturnAnim";
                }
            
            break;
            
            case "ReturnAnim":
                if(sprite_index != ReturnAnim)
                {
                    SetUpAnimation(ReturnAnim);
                }
                AnimationTimer += DELTA_TIME;
                if(AnimationTimer &gt;= AnimatingTime)
                {
                    Event = "Loop";
                }
            break;
            
            
            case "Animate":
                if(sprite_index != Animation)
                {
                    SetUpAnimation(Animation);
                }
                AnimationTimer += DELTA_TIME;
                if(AnimationTimer &gt;= AnimatingTime)
                {
                    image_index = image_number-1;
                    image_speed = 0;
                    ManagingEvent.NextOrder = true;
                    Event = "Loop";
                }
            break;
            
            // LOOP DOES NOTHINMG; DO NOT TOUCH THIS!!! ANIMATE ENDS ON THE LAST IMAGE_INDEX COS OF THIS
            case "Loop":
            
            
            break;
            
            case "TransitionAnim":
                    AnimationTimer += DELTA_TIME;
                    
                    if((AnimationTimer+DELTA_TIME) &gt;=CurrentAnimTime)
                    {
                        Event = "Animate";
                        
                    }
            break;
            
            case "Giv":
                if sprite_index != sCompassionHandGlass
                {
                    SetUpAnimation(sCompassionHandGlass);
                }
                AnimationTimer += DELTA_TIME;
                
                if(AnimationTimer &gt;= AnimatingTime)
                {
                    oPlayerWorld.Event = "Animating";
                    oPlayerWorld.AnimationTime = 3;
                    oPlayerWorld.Animation = sPlayer64TakeGlass;
                    oPlayerWorld.ReturnAnim = sPlayer64GlassReturn;
                    image_speed = 0;
                    Event = "Loop";
                }
                
            break;
            
            case "GetUp":
                if sprite_index != sCompassionSitUp
                {
                    image_speed = AnimationSpeed;
                    sprite_index = sCompassionSitUp;
                    AnimatingTime = (image_number)*DELTA_TIME/image_speed;
                    AnimationTimer = 0;
                }
                AnimationTimer += DELTA_TIME;
                if(AnimationTimer &gt;= AnimatingTime)
                {
                    image_speed = 0;
                    sprite_index = sCompassionOverworldLeftWalk;
                    image_index = 0;
                    x = x-192+32;
                    y = y-128+60+(128-78);
                    ManagingEvent.NextOrder = true;
                    Event = "Loop";
                }
                
            break;
            
            case "Water":
                if(instance_exists(oRustySink))
                {
                    if !Moved
                    {
                        if oRustySink.y &gt; y{
                            yCoordinateMove = (oRustySink.y-40);
                        }else{
                            yCoordinateMove = (oRustySink.y+40);
                        }
                        //Figure out where we're going
                        xCoordinateMove = oRustySink.x;
                        Moved = true;
                    }
                    
                    MoveToCoordinates();
                    //If we're within certain parameters, make our coordinates exactly where we're supposed to be
                    if abs(x-xCoordinateMove) &lt; MySpeed and abs(y-yCoordinateMove) &lt; MySpeed{
                        x = xCoordinateMove;
                        y = yCoordinateMove;
                        image_speed = 0;
                        Moved = false;
                        image_index = 0;
                        Event = "Pour";
                    }
                    
                }
                else
                {
                    Event = "Idle";
                    ManagingEvent.NextOrder = true;
                }
            break;
            
            case "Pour":
                if(sprite_index != sCompassionPour)
                {
                    SetUpAnimation(sCompassionPour);
                }
                AnimationTimer += DELTA_TIME;
                if(AnimationTimer &gt;= AnimatingTime)
                {
                    oRustySink.State = "Open";
                    Event = "Wait";
                    WaitTime = 1.5;
                    image_speed = 0;
                    Goto = "Return";
                    ReturnAnim = sPourReturn;
                }
                
            break;
            
            case "Wait":
                WaitTime-=DELTA_TIME;
                
                if(WaitTime&lt;=0)
                {
                    WaitTime = 0;
                    Event = Goto;
                }
            break;
            
            case "Return":
                if(sprite_index != ReturnAnim)
                {
                    SetUpAnimation(ReturnAnim);
                }
                AnimationTimer += DELTA_TIME;
                if(AnimationTimer &gt;= AnimatingTime)
                {
                    oRustySink.State = "Close";
                    Event = "TakeTo";
                }
                
            
            break;
            
            case "TakeTo":
            
                if !Moved {
                    if oPlayerWorld.x &gt; x{
                        xCoordinateMove = (oPlayerWorld.x-100);
                    }else{
                        xCoordinateMove = (oPlayerWorld.x+100);
                    }
                    //Figure out where we're going
                    yCoordinateMove = oPlayerWorld.y;
                    Moved = true;
                }
                //If we're above the intended yCoordinateMove
                if y &lt; yCoordinateMove{
                    if sprite_index != sCompassionWalkDownGlass{
                        sprite_index = sCompassionWalkDownGlass;
                    }
                    if(abs(y-yCoordinateMove) &lt;MySpeed)
                    {
                        y = yCoordinateMove;
                        vspeed = 0;
                    }
                    else
                    {
                        vspeed = MySpeed;
                    }
                    
                //If we're below our intended yCoordinateMove
                }else if y &gt; yCoordinateMove{
                    if sprite_index != MoveUp{
                        sprite_index = MoveUp
                    }
                    if(abs(y-yCoordinateMove) &lt;MySpeed)
                    {
                        y = yCoordinateMove;
                        vspeed = 0;
                    }
                    else
                    {
                        vspeed = -MySpeed;
                    }
                    
                //If we're to the right of our intended xCoordinateMove
                }else if x &lt; xCoordinateMove{
                    if sprite_index != MoveRight{
                        sprite_index = MoveRight    
                    }
                    
                    if(abs(x-xCoordinateMove) &lt; MySpeed)
                    {
                        x = xCoordinateMove;
                        hspeed = 0;
                    }
                    else
                    {
                        hspeed = MySpeed;
                    }
                //If we're to the left of our intended xCoordinateMove
                }else if x &gt; xCoordinateMove{
                    if sprite_index != sCompassionWalkGlass{
                        sprite_index = sCompassionWalkGlass;
                    
                    }
                    
                    if(abs(x-xCoordinateMove) &lt; MySpeed)
                    {
                        x = xCoordinateMove;
                        hspeed = 0;
                    }
                    else
                    {
                        hspeed = -MySpeed;
                    }
                    

                }
                //If we're within certain parameters, make our coordinates exactly where we're supposed to be
                if abs(x-xCoordinateMove) &lt; MySpeed and abs(y-yCoordinateMove) &lt; MySpeed{
                    x = xCoordinateMove;
                    y = yCoordinateMove;
                    image_speed = 0;
                    image_index = 0;
                    Moved = false;
                    ManagingEvent.NextOrder = true;
                    Event = "Loop";
                }
            
            
            break;
            
            case "DeSpawn":
                if !Moved {
                    if oPlayerWorld.x &gt; x{
                        xCoordinateMove = (oPlayerWorld.x);
                    }else{
                        xCoordinateMove = (oPlayerWorld.x);
                    }
                    //Figure out where we're going
                    yCoordinateMove = oPlayerWorld.y;
                    Moved = true;
                }
                //If we're above the intended yCoordinateMove
                MoveToCoordinates();
                //If we're within certain parameters, make our coordinates exactly where we're supposed to be
                if abs(x-xCoordinateMove) &lt; MySpeed and abs(y-yCoordinateMove) &lt; MySpeed{
                    x = xCoordinateMove;
                    y = yCoordinateMove;
                    image_speed = 0;
                    image_index = 0;
                    Moved = false;
                    ManagingEvent.NextOrder = true;
                    ds_list_destroy(Textlist);
                    oGame.ShowPlayer[1] = true;
                    instance_destroy();
                }
            break;
            
            case "SpawnPlayer":
            
            break;
            
            case "Move":
            
            break;
            
            case "MovePlayer":
                //If we dont know where we're going yet, get the player coordinates and calculate where we're supposed to go to
                if Moved == false{
                    if oPlayerWorld.x &gt; x{
                        xCoordinateMove = (oPlayerWorld.x-100);
                    }else{
                        xCoordinateMove = (oPlayerWorld.x+100);
                    }
                    //Figure out where we're going
                    yCoordinateMove = oPlayerWorld.y;
                    Moved = true;
                }
                MoveToCoordinates();
                //If we're within certain parameters, make our coordinates exactly where we're supposed to be
                if abs(x-xCoordinateMove) &lt; MySpeed and abs(y-yCoordinateMove) &lt; MySpeed{
                    x = xCoordinateMove;
                    y = yCoordinateMove;
                    image_speed = 0;
                    image_index = 0;
                    Moved = false;
                    ManagingEvent.NextOrder = true;
                    Event = "Idle";
                }
                
            break;
        
            case "Idle":
                image_speed = 0;
                image_index = 0;
            break;
        
        
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>


draw_sprite(sprite_index,image_index,round(x),round(y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
