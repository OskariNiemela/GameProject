<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sGoonIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oAi</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>InitializeAi("Enemy", "Magpie", "Melee", sGoonAttack, sGoonIdle, sGoonDeath,sGoonStun,sGoonStunReturn,sGoonAttackReturn,sBlank,sGoonHurt,false,sGoonStunned);

InitializeAISound(sndBlank,sndBlank,sndBlank,sndBlank);

InitializeAIStats(3, 0, 0, 0, 10, 4);

InitializeAIAbilities(oStunBlastAI,sMagpieAttack,20);

Air = sGoonAir;
Landing = sGoonLanding;

//AI Stuff
Target = noone;
Assess = false;
//Attack timer is the time the AI waits between attacks.
AttackTimer = 10/(0.50*Speed);
//MovementTimer is the time the AI waits between moving one tile.
MovementTimer = 8/(0.50*Speed);


//AttackTime = BaseAttackTime/(0.25*Speed)
AttackTime = 24/(0.50*Speed);
//MovementTime = BaseMovementTime / (0.5*Speed);
MovementTime = 12/(0.5*Speed);


Destination = noone;

EnemiesOnRow = false;

var i;
i = 0;
repeat(4){
    ThreatCandidates[i] = noone;
    i += 1;
}
//

ModHP = 0;
ModMAttack = 0;
ModSAttack = 0;
ModRAttack = 0;
ModSpeed   = 0;
ModAP      = 0;
ModCritStr = 0;

State = "JumpIn";

TargetXPositionDifference = 0;
TargetYPositionDifference = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(State){
    case "JumpIn":
        endX = map[gridX,gridY].x;
        endY = map[gridX,gridY].y;
        midX = 820-(820-map[gridX,gridY].x);
        midY = endY-(endY-y);
        startY = y;
        startX = x;
        jumpTimer = 0;
        State = "Jump";
        sprite_index = Air;
    break;    
    
    case "Jump":
        jumpTimer +=DELTA_TIME
        
        x = MoveInBezierCurve(jumpTimer,startX,midX,endX);
        y = MoveInBezierCurve(jumpTimer,startY,midY,endY);
        
        if(jumpTimer&gt;=1)
        {
            if instance_exists(map[gridX,gridY].occupant)
            {
                map[gridX,gridY].occupant.State = "Dead";
            }
            
            map[gridX,gridY].occupant = id;
            
            State = "Land";
        }
    break;
    
    case "Land":
        if sprite_index != Landing
        {
            SetAnimation(Landing);
        }
        Timer += DELTA_TIME;
        if(AnimationTime &lt;= Timer)
        {
            sprite_index = Idle;
            State = "Idle";
        }
    break;
    
    //Decide which player character is our target, so you can approach enemies/get on the same y level as enemies to shoot them.
    case"Assess":
        //Decide who we are targeting
        AssessThreatMelee();

        if instance_exists(Target){
           AIMovementMelee();
        }else{
            MovementTimer = MovementTime;
            State = "Idle";
        }
        
    break;
    //Decide which way to move inorder to get to the most ideal placement to attack our target.
    case"Decide":
        
        
    break;
    
    case"Move":

    break;
    
    case"Stunned":
    if sprite_index != Stunned{
        sprite_index = Stunned;
    }
    StunDuration -= DELTA_TIME;
    MovementTimer = MovementTime;
    AttackTimer = AttackTime;
    
    if StunDuration &lt;= 0{
        State = "Idle";
    
    
    } 
    
    break;
    
    
    case"Attack":
        MeleeAttack(AttackStats,Attack);
    break;
    
    case"Flashing":
 
    break;
    
    case"Return":
        AttackReturnAnimAI();
    break;

    
    case"Dead":
        map[gridX,gridY].occupant = noone;
        depth = 15;
        oBattleScreen.EncounterSize -= 1;
        AttackTimer = 10;
        sprite_index = DeathAnimation;
        MovementTimer = 10;
        State = "Deactive";
    break;
    
    case"Deactive":
        AttackTimer = 10;
        MovementTimer = 10;
    
    
    break;
    
    case"Pause":
        GamePausedAI();
    
    
    break;
    
    case"Paused":
        image_index = AnimationFrame;
        
    break;
    
    case"UseAbility":
        UseAbilityAIStunBlast(Ability1Animation);
    
    
    break;
    
    case "ReturnAbil":
        if sprite_index != Ability2Animation
        {
            SetAnimation(Ability2Animation);
        }
        Timer += DELTA_TIME;
        if Timer &gt;= AnimationTime
        {
            sprite_index = Idle;
            State = "Idle";
        }
        
    break;
    
    case"Unpause":
        image_index = AnimationFrame;
        Timer = PreviousTimer;
        AttackTimer = AttackTimerPaused;
        MovementTimer = MovementTimerPaused;
        State = PreviousState;
        AbilityCooldown = AbilityCooldownPaused;
    break;
}
if instance_exists(Target) and AbilityCooldown &lt;= 0{
    //If this and ypositiondifference both equal zero, the AI will use its ability, so we minus the Targets coordinates from our own and plus the amount of positions we want the difference to be
    //We want the target to be 2 tiles ahead of us on the X plane, so we plus 2 to the xposition difference, and we want to be on the same y plane as our target, so we dont plus anything.
    TargetXPositionDifference = (Target.gridX-gridX)+2;
    TargetYPositionDifference = (Target.gridY-gridY);

}else if AbilityCooldown &lt;= 0{
    AssessThreatMelee();
    //If we've no target, its no use trying to calculate values, so we just set both differences to 1.
    TargetXPositionDifference = (Target.gridX-gridX)+2;
    TargetYPositionDifference = (Target.gridY-gridY);
    
}
AIDecideMelee(TargetXPositionDifference,TargetYPositionDifference);
//Reduces the different timers that dictate when the AI can move, attack and use abilities.
ReduceAITimers();

TakeDamage();
SpriteShake();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
