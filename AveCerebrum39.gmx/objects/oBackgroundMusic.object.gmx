<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>State = "CreateAudioStreams"

SoundOn = true;

//audio_group_load(BackgroundMusic);

musicList = ds_list_create();

//Music tracks
MainMenuMusic = sndMenuMusic;

RoomToGoTo = rMenu;

//Different music tracks for different rooms
MusicArray[0,0] = rMenu;
MusicArray[0,1] = "Title.ogg";
MusicArray[1,0] = rCabinInTheWoods;
MusicArray[1,1] = "Overworld.ogg";
MusicArray[2,0] = rForest;
MusicArray[2,1] = "Overworld.ogg";
MusicArray[3,0] = rJunkyard;
MusicArray[3,1] = "Overworld.ogg";
MusicArray[4,0] = rTownCentre;
MusicArray[4,1] = "Overworld.ogg";
MusicArray[5,0] = rOfficeMayorDefeated;
MusicArray[5,1] = "Overworld.ogg";
SoundCutOff = false;

BattleMusicArray[0,0] = rDirtroad;
BattleMusicArray[0,1] = "BattleLoop.ogg";
//Does the music have an intro?
BattleMusicArray[0,2] = true;
//LengthOfIntro
BattleMusicArray[0,3] = 5.060;
//LengthOfLoop 
BattleMusicArray[0,4] = 45.473;
//LengthOfSong
BattleMusicArray[0,5] = 50.533;
//LoopingPortion
BattleMusicArray[0,6] = "BattleLooping.ogg";
BattleMusicArray[1,0] = rUnknown;
BattleMusicArray[1,1] = "BattleLoop.ogg";
//Does the music have an intro?
BattleMusicArray[1,2] = true;
//LengthOfIntro
BattleMusicArray[1,3] = 5.060;
//LengthOfLoop 
BattleMusicArray[1,4] = 45.473;
//LengthOfSong
BattleMusicArray[1,5] = 50.533;
//LoopingPortion
BattleMusicArray[1,6] = "BattleLooping.ogg";

AudioGain = 1;

BackgroundMusicEmitter = audio_emitter_create();
audio_emitter_gain(BackgroundMusicEmitter,AudioGain);

//Does the current song playing have an intro that should be skipped when looping the song?
Intro = false;
//If we need to skip an intro to the song, take note of the differenct lengths in the song
LengthOfIntro = 0;
LengthOfLoop = 0;
TotalLength = 0;
//Where on the track we are.
TrackPosition = 0;
LoopingPortion = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch State{


    case "CreateAudioStreams":
            var Index, ArrayLength;
            Index = 0;
            ArrayLength = array_height_2d(MusicArray);
            for(i=0; i&lt;ArrayLength;i+=1){
                if RoomToGoTo = MusicArray[i,0]{
                    MusicPlaying = audio_create_stream(MusicArray[i,1]);
                    audio_play_sound(MusicPlaying,1,true);
                    audio_sound_gain(MusicPlaying,AudioGain,0);
                    room_goto(rMenu);
                    State = "Idle"
                    break;
                }
                
            }
        
    break;

    case "RoomTransition":
        //If we should cut off the currently playing song while transitioning or not
        if SoundCutOff{
            if audio_exists(MusicPlaying){
                audio_stop_sound(MusicPlaying);
            }
        
        }
        if audio_exists(LoopingPortion)
        {
            
            audio_stop_sound(LoopingPortion);
            audio_destroy_stream(LoopingPortion);
        }
        audio_stop_all();
        // Play the room transition sound
        /*
        audio_play_sound(RoomTransition
        
        
        */
        State = "Idle"
        break;
        
    case "ComingIntoARoom":
        //Check which music track we should play in this room
        
        audio_destroy_stream(MusicPlaying);
        var Index, ArrayLength;
            Index = 0;
            ArrayLength = array_height_2d(MusicArray);
            for(i=0; i&lt;ArrayLength;i+=1){
                if room = MusicArray[i,0]{
                    MusicPlaying = audio_create_stream(MusicArray[i,1]);
                    if SoundOn{
                        audio_play_sound(MusicPlaying,10,false);    
                        audio_sound_gain(MusicPlaying,AudioGain,0);
                    }
                    State = "Idle";
                    SoundCutOff = false
                    break;
                }
                }
            
        
        
    break;
    
    case "BattleTransition":
        oSFX.State = "LoadSFX";
        var Index, ArrayLength;
            audio_stop_sound(MusicPlaying);
            audio_destroy_stream(MusicPlaying);
            Index = 0;
            ArrayLength = array_height_2d(BattleMusicArray);
            for(i=0; i&lt;ArrayLength;i+=1){
                if RoomToGoTo == BattleMusicArray[i,0]{
                    //Does the song have an intro that we should skip upon looping?
                    if BattleMusicArray[i,2]{
                        Intro = true;
                        LengthOfIntro = BattleMusicArray[i,3];
                        LengthOfLoop = BattleMusicArray[i,4];
                        TotalLength = BattleMusicArray[i,5];
                        LoopingPortion = audio_create_stream(BattleMusicArray[i,6]);
                        TrackPosition = 0;
                    }
                    if !audio_exists(MusicPlaying)
                    {
                        MusicPlaying = audio_create_stream(BattleMusicArray[i,1]);
                        if SoundOn{
                            audio_play_sound(MusicPlaying,1,false);
                            audio_sound_gain(MusicPlaying,AudioGain,0);
                        }  
                    }
                     
                    
                    break;
                }
            }
            State = "Idle";
    
    break;
    
    case "ExitingEncounter":
        oSFX.State = "UnloadSFX";
        audio_destroy_stream(MusicPlaying);
        audio_destroy_stream(LoopingPortion);
        audio_stop_all();
        
        Intro = false;
        LoopingPortion = noone;

        
        State = "Idle"
    
    
    break;
    
    //If something is telling us to change the music change it
    case "ChangeMusic":
        /*-------------------TO DO---------------------------------*/
        State = "Idle";
        
    break;

    case "MoreGain":
        if AudioGain &lt; 1{
            AudioGain += 0.05;
            if SoundOn{
                audio_sound_gain(MusicPlaying,AudioGain,0);
            }else{
                SoundOn = true;
                audio_play_sound(MusicPlaying,1,true);
                audio_sound_gain(MusicPlaying,AudioGain,0);
            }
        
        }
        State = "Idle";
    break;
    
    case "LessGain":
        if AudioGain &gt; 0{
            AudioGain -= 0.05;
            audio_sound_gain(MusicPlaying,AudioGain,0);
            if AudioGain &lt;= 0{
                SoundOn = false;
                audio_stop_sound(MusicPlaying);
            }
        }
        State = "Idle";
    break;
    
    case "Idle":
        
        if Intro{
            TrackPosition += global.SecondsPassedThisFrame;
            if TrackPosition &gt;= TotalLength{
                audio_stop_sound(MusicPlaying);
                if(!audio_is_playing(LoopingPortion))
                {
                    audio_play_sound(LoopingPortion,1,true);
                }
                
                audio_sound_set_track_position(LoopingPortion,TrackPosition-LengthOfLoop);
                audio_sound_gain(LoopingPortion,AudioGain,0);
                Intro = false;
                TrackPosition = 0;
            }
        }
    
    break;
    
    
}





//If We're transitioning into a different room play the a sound related to it and change the background music once we've arrived in the new room
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
