<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sHead</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>OriginalX = x;
OriginalY = y;

Owner = noone;

gridX = 0;
gridY = 0;

DestinationX = 0;
DestinationY = 0;
DestinationGridX = noone;
DestinationGridY = noone;



FlightSpeed = 1500*DELTA_TIME;


State = "FlyTowardTarget";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch State{
    case "FlyTowardTarget": 
        Direction = point_direction(x,y,map[DestinationGridX,DestinationGridY].x,map[DestinationGridX,DestinationGridY].y); 
        Distance = point_distance(x,y,map[DestinationGridX,DestinationGridY].x,map[DestinationGridX,DestinationGridY].y);
        FlightTime = (Distance*DELTA_TIME)/FlightSpeed
        DestinationX = map[DestinationGridX,DestinationGridY].x;
        DestinationY = map[DestinationGridX,DestinationGridY].y;
        direction = Direction;
        speed = FlightSpeed;
        State = "Flying";
    break;
    
    case "Flying":
        FlightTime -= DELTA_TIME;
        if FlightTime &lt;= 0{
            x = DestinationX;
            y = DestinationY;
            State = "Explosion";
        }
    
    break;

    case "FlyBack":
    //Fly back toward OriginalX and OriginalY, once there make Owner animate catching the head and putting it back on
        Direction = point_direction(x,y,OriginalX,OriginalY); 
        Distance = point_distance(x,y,OriginalX,OriginalY);
        FlightTime = (Distance*DELTA_TIME)/FlightSpeed
            
        direction = Direction;
        speed = FlightSpeed;
        State = "FlyingBack";
    break;
    
    case "FlyingBack":
    FlightTime -= DELTA_TIME;
    if FlightTime &lt;= 0{
        if Owner.State != "Dead"{
            Owner.State = "Return";
            Owner.ReturningAnimation = sFearCatchHead;
        }
        instance_destroy();
    
    }
    
    
    break;
    
    case "Explosion":
        Explosion = instance_create(DestinationX,DestinationY,oHeadThrowExplosion);
        Explosion.gridX = DestinationGridX;
        Explosion.gridY = DestinationGridY;
        State = "FlyBack";
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
