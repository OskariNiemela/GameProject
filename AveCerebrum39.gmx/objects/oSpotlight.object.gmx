<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sSpotlight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>21</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//How long it takes to travel to the new location
MovementTime = 0.25;

gridX = 0;
gridY = 0;

DestinationX = 0;
DestinationY = 0;

FlyToX = 0;
FlyToY = 0;

CurrentlySelected = noone;

State = "Idle";


DistanceToDestination = 0;
FlySpeed = 0;
FlyTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
switch State{
    case "Idle":
        //Check whether we're in the right place
        if instance_exists(CurrentlySelected){
            DestinationX = CurrentlySelected.gridX;
            DestinationY = CurrentlySelected.gridY;
        }
        if DestinationX != gridX or DestinationY != gridY{
            if (abs(DestinationX-gridX) + abs(DestinationY-gridY)) = 1{
                gridX = DestinationX;
                gridY = DestinationY;
                x = map[gridX,gridY].x;
                y = map[gridX,gridY].y;
                
            }else{
                State = "GetMovin";
            }
        }
    break;
        
    case "GetMovin":
        FlyToX = map[DestinationX,DestinationY].x;
        FlyToY = map[DestinationX,DestinationY].y;
        gridX = DestinationX;
        gridY = DestinationY;
        direction = point_direction(x,y,FlyToX,FlyToY);
        DistanceToDestination = point_distance(x,y,FlyToX,FlyToY);
        FlySpeed = DistanceToDestination*DELTA_TIME/MovementTime;
        State = "Movin";
    break;

    case"Movin":
        x += lengthdir_x(FlySpeed,direction);
        y += lengthdir_y(FlySpeed,direction);
        FlyTimer += DELTA_TIME;
        
        if FlyTimer &gt;= MovementTime{
            State = "Idle";
            FlyTimer = 0;
            x = FlyToX;
            y = FlyToY;        
        }
        //Move toward our current destination, but also check whether we're still going the right way.
        if instance_exists(CurrentlySelected){
            DestinationX = CurrentlySelected.gridX;
            DestinationY = CurrentlySelected.gridY;
        }
        if DestinationX != gridX or DestinationY != gridY{
            State = "ChangeDirection";
            FlyTimer = 0;
        }
    break;
    
    //If we change characters while we're moving to another character.
    case "ChangeDirection":
        FlyToX = map[DestinationX,DestinationY].x;
        FlyToY = map[DestinationX,DestinationY].y;
        gridX = DestinationX;
        gridY = DestinationY;
        direction = point_direction(x,y,FlyToX,FlyToY);
        DistanceToDestination = point_distance(x,y,FlyToX,FlyToY);
        FlySpeed = DistanceToDestination*DELTA_TIME/MovementTime;
        State = "Movin";
    break;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_text(600,200,State);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
