<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Effects
DamageMultiplier = 1.5;

AttackStatsMultiplyBy = 1/2;

//Duration
Duration = 20;

//Receiver
AbilityToLockOut = choose(0,1,2);
AbilityLocked = true;
Owner = noone;
Debuffed = false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Debuffed = false{
    Owner.DamageMultiplier = Owner.DamageMultiplier*DamageMultiplier;
    Owner.ModAttack = Owner.ModAttack*AttackStatsMultiplyBy;
    Debuffed = true;
    
    //If the ability weve chosen is already locked out, try the other ones
    if Owner.AbilitiesLockedOut[AbilityToLockOut]{
        for(i=0;i&lt;3;i+=1){
            if Owner.AbilitiesLockedOut[i] = false{
                Owner.AbilitiesLockedOut[i] = true;
                AbilityToLockOut = i;
                AbilityLocked = true;
                break;
            }
        }
    }else{
        //If its not locked out lock it.
        Owner.AbilitiesLockedOut[AbilityToLockOut] = true;
        AbilityLocked = true;
    }
    
}

Duration -= DELTA_TIME;

if Duration &lt;= 0{
    if AbilityLocked{
        Owner.AbilitiesLockedOut[AbilityToLockOut] = false;
    }
    Owner.DamageMultiplier = Owner.DamageMultiplier/DamageMultiplier;
    Owner.ModAttack = Owner.ModAttack/AttackStatsMultiplyBy;
    instance_destroy();

}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
