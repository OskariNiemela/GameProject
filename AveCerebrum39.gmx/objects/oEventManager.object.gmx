<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*

    These are here to remind of the names of all the different variables that are passed on to this manager when it is created.
    
    sequence = the sequence of actions which we will follow


*/
State = "Idle";

x = oPlayerWorld.x;
y = oPlayerWorld.y;

followPlayer = false;

oCamera.Event = true;

sequenceIndex = 0;
sequenceList = noone;

NextOrder = true;

CameraMoveSpeed = 100;
CameraMoveTime = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>






/*
        Sequence
*/



//Figure out if our previous animation/dialogue has concluded and we can start the next one
if NextOrder{
    // If the value at 0,0 is 0 then that means the event has concluded
    sequence = sequenceList[| sequenceIndex];
    if(sequence[0,0] != 0)
    {
        switch sequence[0,0]
        {
        // 1 means it is a dialogue
            case 1:
                NextOrder = false;
                mess = sequence[0,2].Textlist;
                arr = ds_list_find_value(mess,sequence[0,1]);    
                effect = arr[1,0];
                
                if(effect)
                {
                
                    box = instance_create(0,0,oTextbox);
                    box.Owner = id;
                    box.effect = true;
                    box.textSound = sequence[0,2].textSound;
                    box.textPortrait = sequence[0,2].textPortrait;
                    box.Messages = arr;
                    box.MessageLength = string_length(arr[2,0]);
                    box.currentLine = "CheckEff";
                    box.Ready = true;
                    NextOrder = false;
                
                }
                else
                {
                    box = instance_create(0,0,oTextbox);
                    box.Owner = id;
                    box.textSound = sequence[0,2].textSound;
                    box.textPortrait = sequence[0,2].textPortrait;
                    box.Messages = arr;
                    box.MessageLength = string_length(arr[2,0]);
                    box.Ready = true;
                    NextOrder = false;
                }
                
            break;
            
            
        // 2 means it is an action
            case 2:
                NextOrder = false;
            //depending on the action do different things
                switch sequence[0,1]
                {
                    case"Move":
                        Actor = sequence[0,2];
                        Actor.xCoordinateMove = sequence[0,3];
                        Actor.yCoordinateMove = sequence[0,4];
                        Actor.Event = "Move";
                        NextOrder = false;
                    break;
                    
                    case "GoTo":
                        Actor = sequence[0,2];
                        Actor.xCoordinateMove = sequence[0,3].x +sequence[0,4];
                        Actor.yCoordinateMove = sequence[0,3].y +sequence[0,5];
                        Actor.Event = "Move";
                        NextOrder = false;
                    break;
                    
                    case "GoToPC":
                        Actor = sequence[0,2];
                        Actor.xCoordinateMove = sequence[0,3].x +sequence[0,4];
                        Actor.yCoordinateMove = sequence[0,3].y +sequence[0,5];
                        Actor.Event = "Move";
                        Actor.dir = sequence[0,6];
                        NextOrder = false;
                    break;
                    
                    case "GetUp":
                        Actor = sequence[0,2];
                        Actor.Event = "GetUp";
                    break;
                    
                    case"MovePlayer":
                        Actor = sequence[0,2];
                        Actor.Event = "MovePlayer";
                        NextOrder = false;
                    break;
                    
                    case"Spawn":
                        Actor = instance_create(sequence[0,3],sequence[0,4],sequence[0,2]);
                        Actor.ManagingEvent = id;
                        Actor.State = "Event";
                        NextOrder = true;
                    break;
                    
                    case"SpawnParty":
                        Dir = sequence[0,2];
                        
                        
                    break;
                    
                    case"SpawnComp":
                        Actor = instance_create(oPlayerWorld.x,oPlayerWorld.y,oCompassionWorld)
                        Actor.State = "Event";
                        Actor.Event = "SpawnPlayer";
                        // Dir 0 = horizontal look down, 1 = horizontal look up, 2 = vertical look left, 3 = vertical look right;
                        Actor.dir = sequence[0,2];
                        Actor.ManagingEvent = id;
                        NextOrder = false;
                    break;
                    
                    case"SpawnPride":
                        Actor = instance_create(oPlayerWorld.x,oPlayerWorld.y,oPrideWorld);
                        Actor.State = "Event";
                        Actor.Event = "SpawnPlayer";
                        Actor.dir = sequence[0,2];
                        Actor.ManagingEvent = id;
                        NextOrder = false;
                    break;
                    
                    case"DeSpawn":
                        if(instance_exists(sequence[0,2]))
                        {
                            Actor = sequence[0,2];
                            Actor.Event = "DeSpawn";
                        }                 
                    break;
                    
                    case"DeSpawnRando":
                        Actor = sequence[0,2];
                        with Actor
                        {
                            destroyOverworldInstance();
                        }
                        NextOrder = true;
                    break;
                    
                    case"DeSpawnParty":
                        if(instance_exists(oCompassionWorld))
                        {
                            oCompassionWorld.Event = "DeSpawn";
                        }
                        NextOrder = false;
                    
                    break;
                    
                    case "DeSpawnPride":
                        if(instance_exists(oPrideDefeat))
                        {
                            oPrideDefeat.Event = "DeSpawn";
                        }
                        else if instance_exists(oPrideWorld)
                        {
                            oPrideWorld.Event = "DeSpawn";
                        }
                        NextOrder = false;
                    break;
                    
                    case "DeSpawnComp":
                        oCompassionWorld.Event = "DeSpawn";
                        NextOrder = false;
                    break;
                    
                    case"Giv":
                        oCompassionSit.Event = "Giv";
                        NextOrder = false;
                    break;
                    
                    case"Water":
                        oCompassionSit.Event = "Water";
                        NextOrder = false;
                    break;
                    
                    case "SitChair":
                        Actor = sequence[0,2];
                        Actor.Event = "SitChair";
                        Actor.Interactable = sequence[0,3];
                        
                    break;
                    
                    case "PickUp":
                        Actor = sequence[0,2];
                        Actor.Event = "PickUp";
                        Actor.Interactable = sequence[0,3];
                        
                    break;
                    
                    case "LiftOut":
                        Actor = sequence[0,2];
                        Actor.Event = "LiftOut";
                        Actor.Interactable = sequence[0,3];
                        Actor.PreLift = sequence[0,4];
                        Actor.Lift = sequence[0,5];
                        Actor.Throw = sequence[0,6];
                        Actor.ThrowReturn = sequence[0,7];
                        NextOrder = false;
                    break;
                    
                    case "Take":
                        Actor = sequence[0,2];
                        Actor.Interactable = sequence[0,3];
                        Actor.Animation = sequence[0,4];
                        Actor.ReturnAnim = sequence[0,5];
                        Actor.Event = "Take";
                    break;
                    
                    case "PutDown":
                        Actor = sequence[0,2];
                        Actor.Event = "PutDown";
                        NextOrder = true;
                    break;
                    
                    case "StandUp":
                        Actor = sequence[0,2];
                        Actor.Event = "GetUp";
                    break;
                    
                    case "Teleport":
                        Actor = sequence[0,2];
                        Actor.x = sequence[0,3];
                        Actor.y = sequence[0,4];
                        NextOrder = true;
                    break;
                    
                     case "TeleportTo":
                        Actor = sequence[0,2];
                        Actor.x = sequence[0,3].x;
                        Actor.y = sequence[0,3].y;
                        NextOrder = true;
                    break;
                    
                    case "CameraPlayer":
                        oCamera.Event = false;
                        NextOrder = true;
                        followPlayer = true;
                    break;
                    
                    case "CameraEvent":
                        oCamera.Event = true;
                        NextOrder = true;
                        followPlayer = false;
                    break;
                    
                    case "Drop":
                        Actor = sequence[0,2];
                        Actor.droppable = sequence[0,3];
                        Actor.dropAnim = sequence[0,4];
                        Actor.Event = "Drop";
                    break;
                    
                    case "SpawnPartyHor":
                    
                    
                    break;
                    
                    case "MoveCamera":
                        cameraX = sequence[0,2];
                        cameraY = sequence[0,3];
                        NextOrder = false;
                        State = "MoveCamera";
                    break;
                    
                    case "MoveCameraPlayer":
                        cameraX = oPlayerWorld.x;
                        cameraY = oPlayerWorld.y;
                        NextOrder = false;
                        State = "MoveCamera";
                    break;
                       
                    case "DropGlass":
                        Actor = sequence[0,2];
                        Actor.Event = "DropGlass";
                        Actor.ReturnAnim = sequence[0,3];
                    break;
                    
                }
            
            
            break;
            
            
        // 3 means it is an animation
            case 3:
                Actor = sequence[0,2];
                Actor.Animation = sequence[0,1];
                Actor.Event = "Animating";
                
                Actor.Animating = true;
                Actor.AnimationTime = sequence[0,3];
                NextOrder = false;
            break;
        
        }
                
    }else{
        //If we've done everything we have had to do, then destroy the event manager and give controll of the player character back to the player.
        for(i=0;i&lt;array_length_1d(Actors);i+=1){
            if instance_exists(Actors[i])
            {
                Actors[i].State = "Idle";
            }
            
        }
        ds_list_destroy(sequenceList);
        instance_destroy();
        oCamera.Event = false;
    }
    sequenceIndex += 1;
//If were in the middle of an action
}else{
    switch State{
        case "DoneTalking":
            NextOrder = true;
            State = "Idle";
        break;
        
        case "MoveCamera":
            direction = point_direction(x,y,cameraX,cameraY);
            distanceToCover = point_distance(x,y,cameraX,cameraY);
            speed = 200*DELTA_TIME;
            CameraMoveTime = distanceToCover/speed;
            
            State = "Moving";
            CameraMoveTime -= DELTA_TIME;
            if CameraMoveTime &lt;= 0{            
                speed = 0;
                State = "Idle";
                NextOrder = true;
            }    
        break;
        
        case "Moving":
            CameraMoveTime -= DELTA_TIME;
            if (abs(x-cameraX)+abs(y-cameraY))&lt;=speed{
                x = cameraX;
                y = cameraY;        
                speed = 0;
                State = "Idle";
                NextOrder = true;
            }   
        break;
    }



}

if followPlayer
{
    if instance_exists(oPlayerWorld)
    {
        x = oPlayerWorld.x;
        y = oPlayerWorld.y;
    }
   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
