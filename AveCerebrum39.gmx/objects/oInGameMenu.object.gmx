<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>WindowHeight = window_get_height();
WindowWidth = window_get_width();

x = WindowWidth/2
y = WindowHeight/8

MenuFrameX1 = WindowWidth/3;
MenuFrameX2 = MenuFrameX1*2;
MenuFrameY1 = WindowHeight/8;
MenuFrameY2 = MenuFrameY1*4;




if oGame.State = "Paused"{
    Mode = "InMenu";
}else{
    Mode = "InBattleMenu";
}
Margin = 10

MemberSelected = false;
AbilitySelected = 0;
AmountOfAbilities = 2;

ButtonSelected = 0;
AmountOfButtonsInMenu = 4;
AmountOfButtonsInOptions = 2;
AmountOfButtonsInPartyScreen = 3;
AmountOfButtonsInBattleMenu = 3;


PartySlot[0] = noone;
PartySlot[1] = noone;
PartySlot[2] = noone;

//1st Party member Ability Y-position
AbilityPos[0,0] = MenuFrameY1*2.5;
//Ability1 X position
AbilityPos[0,1] = x;
//Ability2 X position
AbilityPos[0,2] = x+40;
//Ability3 X position
AbilityPos[0,3] = x+80;
//2nd Party member Ability Y-position
AbilityPos[1,0] = MenuFrameY1*4;
AbilityPos[2,0] = MenuFrameY1*5.5

for(i=0;i&lt;3;i+=1){
    PlayerIn[i] = oGame.ShowPlayer[i];
    //Is the actor in the party?
    PlayerData[i] = oGame.PlayerParty[i,0];
    
}

Button0Active = 0;
Button1Active = 0;
Button2Active = 0;
Button3Active = 0;
/*ButtonsInMenu
0 = Resume Game
1 = Party
2 = Options
3 = MainMenu
4 = Quit Game
*/

/*ButtonsInOptions
0 = MusicVolume
1 = SFXVolume
2 = Back
*/

/*ButtonsInPartyScreen
0 = FirstPartyMember
1 = SecondPartyMember
2 = ThirdPartyMember
3 = Back
*/

/*ButtonsInBattleMenu
0 = MusicVolume
1 = SFXVolume
2 = ResumeGame
3 = QuitGame
*/

/*Abilities
0 = Ability0;
1 = Ability1;
3 = Ability2;
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch Mode{
    case"InBattleMenu":
        if keyboard_check_pressed(vk_up){
                if ButtonSelected &lt;= 0{
                    ButtonSelected = AmountOfButtonsInBattleMenu;
                }else{
                    ButtonSelected -= 1;
                }
            
            }else if keyboard_check_pressed(vk_down){
                if ButtonSelected &gt;= AmountOfButtonsInBattleMenu{
                    ButtonSelected = 0;
                }else{
                    ButtonSelected += 1;
                }
            }else if keyboard_check_pressed(vk_enter){
                switch ButtonSelected{
                    case 2:
                        Mode = "ResumeBattle";
                    break;
                    
                    case 3:
                        Mode = "QuitGame";
                    break;
                } 
            }else if keyboard_check_pressed(ord("P")){
                Mode = "ResumeBattle";
            }else if keyboard_check_pressed(vk_escape){
                Mode = "ResumeBattle";
            }else if keyboard_check_pressed(vk_left){
            
                if ButtonSelected = 0{
                    DecreaseMusicVolume();
                }else if ButtonSelected = 1{
                    DecreaseSFXVolume();
                }
            }else if keyboard_check_pressed(vk_right){
            
                if ButtonSelected = 0{
                    IncreaseMusicVolume();
                }else if ButtonSelected = 1{
                    IncreaseSFXVolume();
                }
            }
    
            
    break;    

    case"InMenu":
            if keyboard_check_pressed(vk_up){
                if ButtonSelected &lt;= 0{
                    ButtonSelected = AmountOfButtonsInMenu;
                }else{
                    ButtonSelected -= 1;
                }
            
            }else if keyboard_check_pressed(vk_down){
                if ButtonSelected &gt;= AmountOfButtonsInMenu{
                    ButtonSelected = 0;
                }else{
                    ButtonSelected += 1;
                }
            }else if keyboard_check_pressed(vk_enter){
                switch ButtonSelected{
                    case 0:
                        Mode = "ResumeGame";
                    break;
                    
                    case 1:
                        Mode = "PartyScreen";
                        GoPartyScreen(MenuFrameX1-35,MenuFrameY1+20);
                        ButtonSelected = 0;
                    break;

                    
                    case 2:
                        Mode = "InOptions";
                        ButtonSelected = 0;
                    break;
                    
                    case 3:
                        Mode = "GoToMainMenu";
                    break;
                    
                    case 4:
                        Mode = "QuitGame";
                    break;
                } 
            }else if keyboard_check_pressed(ord("P")){
                Mode = "ResumeGame";
            }else if keyboard_check_pressed(vk_escape){
                Mode = "ResumeGame";
            }
        
    
    break;
    
    case "InOptions":
        if keyboard_check_pressed(vk_up){
            if ButtonSelected &lt;= 0{
                ButtonSelected = AmountOfButtonsInOptions;
            }else{
                ButtonSelected -= 1;
            }
        }else if keyboard_check_pressed(vk_down){
            if ButtonSelected &gt;= AmountOfButtonsInOptions{
                ButtonSelected = 0;
            }else{
                ButtonSelected += 1;
            }
        
        }else if keyboard_check_pressed(vk_left){
            if ButtonSelected == 0{
                DecreaseMusicVolume();
            }else if ButtonSelected == 1{
                DecreaseSFXVolume();
            }
        }else if keyboard_check_pressed(vk_right){
            if ButtonSelected == 0{
                IncreaseMusicVolume();
            }else if ButtonSelected == 1{
                IncreaseSFXVolume();
            }
        }else if keyboard_check_pressed(vk_enter){
            if ButtonSelected == 2{
                Mode = "InMenu";
            }
        }
            

    break;
    
    case "PartyScreen":
        
        if !MemberSelected
        {
            if keyboard_check_pressed(vk_up){
                if ButtonSelected &lt;= 0{
                    ButtonSelected = AmountOfButtonsInPartyScreen;
                }else{
                    ButtonSelected -= 1;
                }
            
            }else if keyboard_check_pressed(vk_down){
                if ButtonSelected &gt;= AmountOfButtonsInPartyScreen{
                    ButtonSelected = 0;
                }else{
                    ButtonSelected += 1;
                }
            }else if keyboard_check_pressed(vk_enter)
            {
                if(ButtonSelected = 3)
                {
                    for(a=0;a&lt;3;a++)
                    {
                        PartySlot[a].State = "Des";
                        PartySlot[a] = noone;
                    }
                    Mode = "InMenu";
                    ButtonSelected = 0;
                }
                else
                {
                    if PartySlot[ButtonSelected].active
                    {
                        
                        MemberSelected = true;
                        PartySlot[ButtonSelected].ButtonSelected = 0;
                        PartySlot[ButtonSelected].State = "InHere";
                    }
                
                }

            }
            
            if keyboard_check_pressed(vk_escape){
                for(a=0;a&lt;3;a++)
                {
                    PartySlot[a].State = "Des";
                    PartySlot[a] = noone;
                }
                Mode = "InMenu";
                ButtonSelected = 0;
            }
        
        
        }
        
        
    break;
    
    case "ResumeGame":
        oGame.State = "UnpauseOverworld";
        instance_destroy();       
    break;
    
    case "ResumeBattle":
        oGame.State = "UnpauseBattle";
        instance_destroy();
    break
    
    case "GoToMainMenu":
        ResetoGame();
        BackToMainMenu();
    break;
    
    case "QuitGame":
        SaveSoundOptions();
        game_end();
    break;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
x = WindowWidth/2
y = WindowHeight/8

MenuFrameX1 = WindowWidth/3;
MenuFrameX2 = MenuFrameX1*2;
MenuFrameY1 = WindowHeight/8;
MenuFrameY2 = MenuFrameY1*4;

CurrentY = y





Button0Active = 0;
Button1Active = 0;
Button2Active = 0;
Button3Active = 0;



switch Mode{
    case "InMenu":
    //Draw the MenuFrame and the buttons associated with it.
        draw_set_colour(c_black);
        draw_rectangle(MenuFrameX1-80,MenuFrameY1,MenuFrameX2+80,MenuFrameY2+80,false);
        draw_set_colour(c_white);

        if ButtonSelected = 0{
            Button0Active = 1;
        }
        draw_sprite(sResumeGame,Button0Active,x,MenuFrameY1*1.5);
        
        if ButtonSelected = 1{
            Button1Active = 1;
        }
        draw_sprite(sParty,Button1Active,x,MenuFrameY1*2);
        
        if ButtonSelected = 2{
            Button2Active = 1;
        }
        
        draw_sprite(sOptionsInGame,Button2Active,x,MenuFrameY1*3);
        
        if ButtonSelected = 3{
            Button3Active = 1;
        }
        
        draw_sprite(sMenu,Button3Active,x,MenuFrameY1*3.5);
        
        
    break;
   
    case "InBattleMenu":
        //While were in battle just draw the sound options, and make the player be able to adjust them, or quit the game
       /*                                          To-Do                                       */
     
        MusicVolume = oBackgroundMusic.AudioGain/0.05;
        SFXVolume = oSFX.SFXGain/0.05;
        switch ButtonSelected{
            case 0:
                Button0Active = 1;
            break;
            
            case 1:
                Button1Active = 1;
            break;
            
            case 2:
                Button2Active = 1;
            break;
            
            case 3:
                Button3Active = 1;
            break;
        
        }
        OptionsMenuDrawEvent(sMusicVolInGame,Button0Active,MenuFrameX1+sprite_get_width(sMusicVolInGame),MenuFrameY1*1.25);
        //Draw volume indicator
        var XPos, Y;
        Y = MenuFrameY1*1.75;
        XPos = MenuFrameX1+sprite_get_width(sMusicVolInGame)/2;
        draw_sprite(sVolumeBar,0,XPos,Y);
          for(i=0;i&lt;(MusicVolume);i+=1){
                draw_sprite(sVolumePip,0,XPos,Y);   
                XPos += 10;
          
          }
        OptionsMenuDrawEvent(sSFXVolInGame,Button1Active,MenuFrameX1+sprite_get_width(sSFXVolInGame),MenuFrameY1*2.25);
        //Draw SFX volume indicator
        Y = MenuFrameY1*2.75;
        XPos = MenuFrameX1+sprite_get_width(sSFXVolInGame)/2;
        draw_sprite(sVolumeBar,0,XPos,Y);
        for(i=0;i&lt;(SFXVolume);i+=1){
                draw_sprite(sVolumePip,0,XPos,Y);   
                XPos += 10;
          
          }
        
        OptionsMenuDrawEvent(sResumeGame,Button2Active,x,MenuFrameY1*3.5);
        
        OptionsMenuDrawEvent(sInGameExit,Button3Active,x,MenuFrameY1*4);
    break;
    
    case "InOptions":
        draw_set_colour(c_black);
        draw_rectangle(MenuFrameX1,MenuFrameY1,MenuFrameX2,MenuFrameY2,false);
        draw_set_colour(c_white);
        MusicVolume = oBackgroundMusic.AudioGain/0.05;
        SFXVolume = oSFX.SFXGain/0.05;
        switch ButtonSelected{
            case 0:
                Button0Active = 1;
            break;
            
            case 1:
                Button1Active = 1;
            break;
            
            case 2:
                Button2Active = 1;
            break;
        
        }
        OptionsMenuDrawEvent(sMusicVolInGame,Button0Active,MenuFrameX1+sprite_get_width(sMusicVolInGame),MenuFrameY1*1.25);
        //Draw volume indicator
        var XPos, Y;
        Y = MenuFrameY1*1.75;
        XPos = MenuFrameX1+sprite_get_width(sMusicVolInGame)/2;
        draw_sprite(sVolumeBar,0,XPos,Y);
          for(i=0;i&lt;(MusicVolume);i+=1){
                draw_sprite(sVolumePip,0,XPos,Y);   
                XPos += 10;
          
          }
        OptionsMenuDrawEvent(sSFXVolInGame,Button1Active,MenuFrameX1+sprite_get_width(sSFXVolInGame),MenuFrameY1*2.25);
        //Draw SFX volume indicator
        Y = MenuFrameY1*2.75;
        XPos = MenuFrameX1+sprite_get_width(sSFXVolInGame)/2;
        draw_sprite(sVolumeBar,0,XPos,Y);
        for(i=0;i&lt;(SFXVolume);i+=1){
                draw_sprite(sVolumePip,0,XPos,Y);   
                XPos += 10;
          
          }
        
        OptionsMenuDrawEvent(sInGameExit,Button2Active,x,MenuFrameY1*3.5);
    
    break;
    
    case "PartyScreen":
        draw_set_color(c_black);
        draw_rectangle(MenuFrameX1-30,MenuFrameY1,MenuFrameX2+30,MenuFrameY1*7,false);
        draw_set_color(c_white);

        switch ButtonSelected{
            case 0:
                Button0Active = 1;
                draw_rectangle(MenuFrameX1-25,MenuFrameY1*1.3,MenuFrameX2,MenuFrameY1*2.7,true);
            break;
            
            case 1:
                Button1Active = 1;
                draw_rectangle(MenuFrameX1-25,MenuFrameY1*2.8,MenuFrameX2,MenuFrameY1*4.2,true);
            break;
            
            case 2:
                Button2Active = 1;
                draw_rectangle(MenuFrameX1-25,MenuFrameY1*4.3,MenuFrameX2,MenuFrameY1*5.7,true);
            break;
            
            case 3:
                Button3Active = 1;
            break;

        draw_sprite(sInGameExit,Button3Active,x,MenuFrameY1*6.5);
        
        }
        
        
    break;
}

draw_text(x,MenuFrameY1*7,string(ButtonSelected));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
