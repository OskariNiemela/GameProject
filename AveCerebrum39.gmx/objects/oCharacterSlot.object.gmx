<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>textMargin = 10;
textMaxWidth = 40*8;

textLine = ds_list_create();
textLine[| 0] = "";
textLine[| 1] = "";
textLine[| 2] = "";

ButtonSelected = 0;
abilityIndex = 0;
activeIndex = 0;
characterKey = 0;
description = "";

select1 = undefined;
select2 = undefined;


topRightX = 0;
topRightY = 0;

portrait = noone;

active = false;

activeAbilities = ds_list_create();
allAbilitiesDisplay = ds_list_create();

Owner = noone;

allAbilities = ds_map_create();


State = "Idle";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch State
{
    case "Idle":
    
    
    break;


    case "InHere":
        
        if(keyboard_check_pressed(vk_left))
        {
            if(ButtonSelected==0)
            {
                ButtonSelected = ds_list_size(allAbilitiesDisplay)-1;
                
            }
            else
            {
                ButtonSelected -= 1;
            }
            description = allAbilities[? allAbilitiesDisplay[| ButtonSelected]];
            SortDescription(description);
        }
        else if(keyboard_check_pressed(vk_right))
        {
            if(ButtonSelected==ds_list_size(allAbilitiesDisplay)-1)
            {
                ButtonSelected = 0;
            }
            else
            {
                ButtonSelected += 1;
            }
            description = allAbilities[? allAbilitiesDisplay[| ButtonSelected]];
            SortDescription(description);
        }
        else if(keyboard_check_pressed(ord("Z")))
        {
            if is_undefined(select1)
            {
                select1 = allAbilitiesDisplay[| ButtonSelected];
                abilityIndex = ButtonSelected;
                if ButtonSelected &gt; 2
                {
                    ButtonSelected = 2;
                }
                State = "ActiveAbilities";
                description = allAbilities[? activeAbilities[| ButtonSelected]];
            }
            else
            {
                select2 = allAbilitiesDisplay[| ButtonSelected];
                abilityIndex = ButtonSelected;
                changeAbilities(select1,select2);
            }
        }
        else if(keyboard_check_pressed(vk_down))
        {
            if(is_undefined(select1))
            {
                if ButtonSelected &gt; 2
                {
                    ButtonSelected = 2;
                }
                State = "ActiveAbilities";
                description = allAbilities[? activeAbilities[| ButtonSelected]];
                SortDescription(description);
            }

        }
        
        
        if keyboard_check_pressed(ord("B"))
        {
            description = "";
            select1 = undefined;
            select2 = undefined;
            Owner.MemberSelected = false;
            State = "Idle";
        }
    break;
    
    case "ActiveAbilities":
        
        if(keyboard_check_pressed(vk_left))
        {
            if(ButtonSelected&gt;0)
            {
                ButtonSelected-=1;
            }
            else
            {
                ButtonSelected = 2;
            }
            description = allAbilities[? activeAbilities[| ButtonSelected]]
            SortDescription(description);
        }
        
        else if(keyboard_check_pressed(vk_right))
        {
            if(ButtonSelected&lt;2)
            {
                ButtonSelected += 1;
            }
            else
            {
                ButtonSelected = 0;
            }
            description = allAbilities[? activeAbilities[| ButtonSelected]]
            SortDescription(description);
        
        }
        else if(keyboard_check_pressed(ord("Z")))
        {
            if is_undefined(select1)
            {
                select1 = activeAbilities[| ButtonSelected];
                activeIndex = ButtonSelected;
                State = "InHere";
                description = allAbilities[? allAbilitiesDisplay[| ButtonSelected]]
            }
            else
            {
                select2 = activeAbilities[| ButtonSelected];
                activeIndex = ButtonSelected;
                changeAbilities(select2,select1);
            }
        }
        else if(keyboard_check_pressed(vk_up))
        {
            if(is_undefined(select1))
            {
                State = "InHere";
            }
            description = allAbilities[? allAbilitiesDisplay[| ButtonSelected]];
            SortDescription(description);
        }
    
        if keyboard_check_pressed(ord("B"))
        {
            description = "";
            select1 = undefined;
            select2 = undefined;
            Owner.MemberSelected = false;
            State = "Idle";
        }
    break;
    
    case "Des":
        ds_list_destroy(activeAbilities);
        ds_map_destroy(allAbilities);
        instance_destroy();
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_rectangle(topRightX,topRightY,topRightX+480,topRightY+120,false);

if(active)
{
    draw_set_color(c_black);
    switch State
    {
        case "ActiveAbilities":
            draw_rectangle(topRightX+40*(ButtonSelected),topRightY+86,topRightX+40*(ButtonSelected)+40,topRightY+126,false);
            draw_set_color(c_black);
            draw_text(500,500,State);
            draw_set_color(c_white);
            draw_text(1000,500,select1);
            draw_text(1100,500,select2);
            draw_text(1000,650,ButtonSelected);
        break;
        
        case "InHere":
            draw_rectangle(topRightX+40*(ButtonSelected+1),topRightY+10,topRightX+40*(ButtonSelected+1)+40,topRightY+50,false);
            draw_set_color(c_black);
            draw_text(500,500,State);
            draw_set_color(c_white);
            draw_text(1000,500,select1);
            draw_text(1100,500,select2);
            draw_text(1000,650,ButtonSelected);
        break;
    }
    
    draw_set_color(c_white);
    //Draw portrait
    //draw_sprite(portrait,0,topRightX+10,topRightY+10);
    

    //Draw all the abilities
    
    for(b=0;b&lt;ds_list_size(allAbilitiesDisplay);b++)
    {
        abilitySprite = allAbilitiesDisplay[| b];
        draw_sprite(abilitySprite,0,topRightX+40*(b+1),topRightY+10);    
    }
    
    //Draw active abilities
    for(a=0;a&lt;3;a++)
    {
        draw_sprite(activeAbilities[| a],0,topRightX+40*a,topRightY+86);
    }
    //~~~~~~~~~~~~~~~TODO: Draw textbox and possible abilitytext
    draw_set_color(c_black);
    draw_rectangle(topRightX+40*3+30,topRightY+40,topRightX+40*11+30,topRightY+110,false);
    draw_set_color(c_white);
    draw_set_font(fAbility);
    
    for(i=0;i&lt;3;i++)
    {
        draw_text(topRightX+40*3+textMargin+30,topRightY+(40)+10*(i+1),textLine[| i]);
    }
    
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
