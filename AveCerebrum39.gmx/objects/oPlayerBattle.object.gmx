<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCompassion</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>oActor</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>InitializeActor("Player", "Player", "Melee", sCompassionAttack, sCompassion, sCompassionDead,sCompassionHeal,sCompassionAttackBuff,sCompassionHaste,sCompassionAttackReturn,sPlayerVictory,sCompassionHurt,oPartyMember2Portrait,sCompassionFeet,oCompassionTorso);
InitializeExtraAnimations(sCompassionRevive,sCompassionRevive,sCompassionHealReturn,sCompassionAttackBuffReturn,sCompassionHasteReturn);
InitializeActorSounds(sndBlank,sndHealing,sndBlank,sndBlank,sndBlank);

InitializeStats(2, 0, 0, 0, 8, 18,1);

InitializeAbilities(oHeal,oAttackBuff,oHaste,"Team",sHealBuff,sAttackBuff,sHasteToolbar,15,15,15,false,false,false);

initialize_effects(oComPar,c_blue);

image_speed = AnimationSpeed;

AttackTime = 12/(0.70*Speed);
MovementTime = 5/(0.90*Speed);

abilityAnims = ds_map_create();

ability = ds_list_create();
ability[| 0] = false;
ability[| 1] = sCompassionHeal;
ability[| 2] = sCompassionHealReturn;
ability[| 3] = 15;
ability[| 4] = sHealBuff;
ability[| 5] = sndHealing;

abilityAnims[? oHeal] = ability;

ability = ds_list_create();
ability[| 0] = false;
ability[| 1] = sCompassionAttackBuff;
ability[| 2] = sCompassionAttackBuffReturn;
ability[| 3] = 15;
ability[| 4] = sAttackBuff;
ability[| 5] = sndBlank;

abilityAnims[? oAttackBuff] = ability;

ability = ds_list_create();
ability[| 0] = false;
ability[| 1] = sCompassionHaste;
ability[| 2] = sCompassionHasteReturn;
ability[| 3] = 15;
ability[| 4] = sHasteToolbar;
ability[| 5] = sndBlank;

abilityAnims[? oHaste] = ability;

ability = ds_list_create();
ability[| 0] = true;
ability[| 1] = sCompassionHeal;
ability[| 2] = sCompassionHealReturn;
ability[| 3] = 15;
ability[| 4] = sHealBuff;
ability[| 5] = sndHealing;
ability[| 6] = sCompassionHealReturn;

abilityAnims[? oKnockback] = ability;

AttackTimer = 0;
MovementTimer = 0;



Threat = 8;
MaxThreat = 8;
ThreatLevel = 8;

Stunned = sCompassionStunned;


ModHP = 0;
ModAttack = 1;
ModSpeed   = 0;
ModCritStr = 0;
ModThreat  = 0;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
/*
switch State{  
             
     case "Begin":

        break;   


     case  "Return":
        AttackReturnAnim();
    break;
    
    case"Attack":
        //If we're ranged shoot a projectile in a straight line'
        MeleeAttack(floor(random_range(MinAttack,AttackStats)+ModAttack), Attack)
    
    
    break;
    
    case "Idle":

    
    break;
    
    
    case "Attacking":

    break;
        
    case "Move":

    break;
    
    
    case "Victory":

    
    break;
    
    case "Hurt":

    break;
    
    case "TakingDamage":

    break;
    

    case "UsingAbility":
    if UsingAbility = Abilities[0]{
            AbilityCooldown1 = 20;
            State = "AbilityAnimation";
            AbilityAnimation = Ability1Animation;
        }else{
            AbilityCooldown2 = 15;
            State = "AbilityAnimation";
            AbilityAnimation = Ability2Animation;
        }
       
    
    
    break;
    
    case"AbilityAnimation":
        AbilityAnimations();
    
    
    break;
    
    
    case "EvaluateMovement":

    break;
    
    case "Dead":
        sprite_index = DeathAnimation;
        oBattleScreen.Players -= 1;
        map[gridX,gridY].occupant = noone;
        State = "Death";
        oCursor.Party[PartyNumber] = noone;
        oPartyMember2Portrait.Deactive = true;
        ds_list_add(oBattleScreen.DeadPlayers,id);
        AbilityCooldown1 = 0;
        AbilityCooldown2 = 0;
    break;
    
    case "Resurrection":
        Resurrection();
        HitPoints = MaxHitPoints/2;
        oPartyMember2Portrait.Deactive = false;
    
    
    break;
    
    case"Pause":
        GamePause();
    break;
    
    case "Paused":
        image_index = AnimationFrame;
    break;
    
    case"Unpause":
        State = PreviousState;
        image_index = AnimationFrame;
        Timer = PreviousTimer;
    break;
    
    case "Stunned":
        sprite_index = Stunned;
        StunDuration -= DELTA_TIME;
        if StunDuration &lt;= 0{
            State = "Idle";
        }
    
    break;
}
Healing();

TakeDamage();

ReduceCooldowns();

SpriteShake();
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
