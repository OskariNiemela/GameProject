<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>HealingDone = 4;



Owner = noone;


gridX = 0;
gridY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//Countdown the time the buff is active

if instance_exists(Owner){
    Owner.Heal += HealingDone;
    gridX = Owner.gridX;
    gridY = Owner.gridY;
    var Neighbors, b, Neighbor, c;
    NeighborsSize = ds_list_size(map[gridX,gridY].neighbors);
    b = 0;
    //go through all the neighboring nodes and give their occupants healing if they're on our side.
    repeat(NeighborsSize){
       Neighbor = ds_list_find_value(map[gridX,gridY].neighbors,b);
       if instance_exists(Neighbor.occupant) and Neighbor.occupant.Owner = "Player"{
            hel = instance_create(Neighbor.occupant.x,Neighbor.occupant.y,oHealThis);
            hel.Owner = Neighbor.occupant;
       }
       b += 1;
    }
    //Check the next three nodes on all sides and give their occupants healing if they're on our side.
    if gridX-2 &gt;= 0 and instance_exists(map[gridX-2,gridY]){
        if instance_exists(map[gridX-2,gridY].occupant) and map[gridX-2,gridY].occupant.Owner = "Player"{
            hel = instance_create(map[gridX-2,gridY].occupant.x,map[gridX-2,gridY].occupant.y,oHealThis);
            hel.Owner = map[gridX-2,gridY].occupant;
        }
    }
    if gridX-2 &gt;= 0 and gridY-1&gt;=0 and instance_exists(map[gridX-2,gridY-1]){
        if instance_exists(map[gridX-2,gridY-1].occupant) and map[gridX-2,gridY-1].occupant.Owner = "Player"{
            hel = instance_create(map[gridX-2,gridY-1].occupant.x,map[gridX-2,gridY-1].occupant.y,oHealThis);
            hel.Owner = map[gridX-2,gridY-1].occupant;
        }
    }
    if gridX-2 &gt;= 0 and gridY+1 &lt;= oCursor.MapHeight and instance_exists(map[gridX-2,gridY+1]){
        if instance_exists(map[gridX-2,gridY+1].occupant) and map[gridX-2,gridY+1].occupant.Owner = "Player"{
            hel = instance_create(map[gridX-2,gridY+1].occupant.x,map[gridX-2,gridY+1].occupant.y,oHealThis);
            hel.Owner = map[gridX-2,gridY+1].occupant;
        }
    }
    if gridY-2&gt;=0 and instance_exists(map[gridX,gridY-2]){
        if instance_exists(map[gridX,gridY-2].occupant) and map[gridX,gridY-2].occupant.Owner = "Player"{
            hel = instance_create(map[gridX,gridY-2].occupant.x,map[gridX,gridY-2].occupant.y,oHealThis);
            hel.Owner = map[gridX,gridY-2].occupant;
        }
    }
    if gridX-1&gt;=0 and gridY-2&gt;0 and instance_exists(map[gridX-1,gridY-2]){
        if instance_exists(map[gridX-1,gridY-2].occupant) and map[gridX-1,gridY-2].occupant.Owner = "Player"{
            hel = instance_create(map[gridX-1,gridY-2].occupant.x,map[gridX-1,gridY-2].occupant.y,oHealThis);
            hel.Owner = map[gridX-1,gridY-2].occupant;
        }
    }
   
   if gridY-2 &gt;= 0 and gridX+1 &lt;= oCursor.MapWidth and instance_exists(map[gridX+1,gridY-2]){
            if instance_exists(map[gridX+1,gridY-2].occupant) and map[gridX+1,gridY-2].occupant.Owner = "Player"{
                hel = instance_create(map[gridX+1,gridY-2].occupant.x,map[gridX+1,gridY-2].occupant.y,oHealThis);
                hel.Owner = map[gridX+1,gridY-2].occupant;
            }
        }
    if gridX+2 &lt;= oCursor.MapWidth and  instance_exists(map[gridX+2,gridY]){
        if instance_exists(map[gridX+2,gridY].occupant) and map[gridX+2,gridY].occupant.Owner = "Player"{
            hel = instance_create(map[gridX+2,gridY].occupant.x,map[gridX+2,gridY].occupant.y,oHealThis);
            hel.Owner = map[gridX+2,gridY].occupant;
        }
    }
    if gridY+1 &lt;= oCursor.MapHeight and gridX+2 &lt;= oCursor.MapWidth and instance_exists(map[gridX+2,gridY+1]){
        if instance_exists(map[gridX+2,gridY+1].occupant) and map[gridX+2,gridY+1].occupant.Owner = "Player"{
            hel = instance_create(map[gridX+2,gridY+1].occupant.x,map[gridX+2,gridY+1].occupant.y,oHealThis);
            hel.Owner = map[gridX+2,gridY+1].occupant;
        }
    }
     if gridY-1 &gt;= 0 and gridX+2 &lt;= oCursor.MapWidth and instance_exists(map[gridX+2,gridY-1]){
        if instance_exists(map[gridX+2,gridY-1].occupant) and map[gridX+2,gridY-1].occupant.Owner = "Player"{
            hel = instance_create(map[gridX+2,gridY-1].occupant.x,map[gridX+2,gridY-1].occupant.y,oHealThis);
            hel.Owner = map[gridX+2,gridY-1].occupant;
        }
    }
     if gridY+2 &lt;= oCursor.MapHeight and instance_exists(map[gridX,gridY+2]){
        if instance_exists(map[gridX,gridY+2].occupant) and map[gridX,gridY+2].occupant.Owner = "Player"{
            hel = instance_create(map[gridX,gridY+2].occupant.x,map[gridX,gridY+2].occupant.y,oHealThis);
            hel.Owner = map[gridX,gridY+2].occupant;
        }
    }
    if gridY+2 &lt;= oCursor.MapHeight and gridX+1 &lt;= oCursor.MapWidth and instance_exists(map[gridX+1,gridY+2]){
        if instance_exists(map[gridX+1,gridY+2].occupant) and map[gridX+1,gridY+2].occupant.Owner = "Player"{
            hel = instance_create(map[gridX+1,gridY+2].occupant.x,map[gridX+1,gridY+2].occupant.y,oHealThis);
            hel.Owner = map[gridX+1,gridY+2].occupant;
        }
    }
    if gridX-1&gt;= 0 and gridY+2 &lt;= oCursor.MapHeight and instance_exists(map[gridX-1,gridY+2]){
        if instance_exists(map[gridX-1,gridY+2].occupant) and map[gridX-1,gridY+2].occupant.Owner = "Player"{
            hel = instance_create(map[gridX-1,gridY+2].occupant.x,map[gridX-1,gridY+2].occupant.y,oHealThis);
            hel.Owner = map[gridX-1,gridY+2].occupant;
        }
    }
    instance_destroy();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
