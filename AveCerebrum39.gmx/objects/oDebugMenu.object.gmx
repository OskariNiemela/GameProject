<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rooms = ds_map_create();
ds_map_add(rooms,"cabin",rCabinInTheWoods);
ds_map_add(rooms,"foresta",rForest);
ds_map_add(rooms,"forestb",rForestB);
ds_map_add(rooms,"alcovea",rAlcove);
ds_map_add(rooms,"alcoveb",rAlcove2);
ds_map_add(rooms,"junkyard",rJunkyard);
ds_map_add(rooms,"outside",rOutside);
ds_map_add(rooms,"outsideDown",rOutsideDown);
ds_map_add(rooms,"townhall",rTownHall);
ds_map_add(rooms,"bar",rBar);
ds_map_add(rooms,"books",rBooks);
ds_map_add(rooms,"shoppe",rShoppe);
ds_map_add(rooms,"generic",rGeneric);
ds_map_add(rooms,"OutsideTown",rTownOutskirts);
ds_map_add(rooms,"OutsideWarehouse", rTownCentreRight);
ds_map_add(rooms,"InsideWarehouse", rWarehouse0);
ds_map_add(rooms, "OutsideBoulder", rTownCentreDown);
ds_map_add(rooms, "TownCentreDownLeft", rTownCentreDownLeft);
ds_map_add(rooms, "TownCentre",rTownCentre);
flags = global.eventFlagsMap;
flag = noone;


index = 0;
room_key = ds_map_find_first(rooms);
for (i=0;i&lt;ds_map_size(rooms);i+=1){
    room_keys[index] = room_key;
    room_key = ds_map_find_next(rooms,room_key);
    if is_undefined(room_key){
        break;
    }else{
        index+=1;
    }
}

button_amount = 0;



//encounterrooms = oGame.EncounterMapList;

state = "Menu";

//menu = ds_map_create();
//ds_map_add_map(menu,"Rooms",rooms);
//ds_map_add_list(menu,"Encounters",oGame.EncountersMapList);
//ds_map_add_list(menu,"Triggers",triggers);

menus[0] = "Rooms";
menus[1] = "Triggers";

menu_indexes = array_length_1d(menus)-1

page = 0;
pages = 0;
index = 0;

button_choice = 0

begin_y = window_get_height()/15;
begin_x = window_get_width()/2;

current_menu = "Rooms";

selectroom = noone; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch state{
    case "Menu":


        
        switch current_menu{
                case "Rooms":
                    button_amount = array_length_1d(room_keys)-1;
                    pages = ceil(button_amount/15);
                    
                    if button_choice &gt; 14 + page*15{
                        page += 1;
                    }else if button_choice &lt; 15+(page-1)*15{
                        page -= 1;
                    
                    }
                    
                    if keyboard_check_pressed(vk_down){
                        if button_choice &lt; button_amount{
                            button_choice += 1;
                        }else{
                            button_choice = 0;
                        }
                
                    }else if keyboard_check_pressed(vk_up){
                        if button_choice &gt; 0{
                            button_choice-=1;
                        }else{
                            button_choice = button_amount;
                        }
                        
                    }
       
                    
                    if keyboard_check_pressed(vk_enter){
                        FadingTransitionFromRoomToRoom(ds_map_find_value(rooms,room_keys[button_choice]),400,400,false,true);
                    }else if keyboard_check_pressed(vk_shift){
                        selectroom = ds_map_find_value(rooms,room_keys[button_choice]);
                        if !is_undefined(ds_map_find_value(oGame.encounters_accessor,selectroom)){
                            page = 0;
                            button_choice = 0;
                            encounters = oGame.encounters_accessor[? selectroom];
                            current_menu = "Encounters";
                        }
                    }
                    if keyboard_check_pressed(vk_escape){
                        state = "Quit";
                    }
                    
                break;
                
                case "Encounters":
                    button_amount = array_height_2d(encounters)-1;
                    pages = floor(button_amount/15);
                    
                    if button_choice &gt; 14 + page*15{
                        page += 1;
                    }else if button_choice &lt; 15+(page-1)*15{
                        page -= 1;
                    
                    }
                    
                    
                    if keyboard_check_pressed(vk_down){
                        if button_choice &lt; button_amount{
                            
                            button_choice += 1;
                        }else{
                            button_choice = 0;
                        }
                
                    }else if keyboard_check_pressed(vk_up){
                        if button_choice &gt; 0{
                            button_choice-=1;
                        }else{
                            button_choice = button_amount;
                        }
                        
                    }
                    
                    if keyboard_check_pressed(vk_enter){
                        if encounters[@ 0,0]{
                            encounters[@ 0,0] = false;
                        }else{
                            encounters[@ 0,0] = true;
                        }
                    }else if keyboard_check_pressed(vk_escape){
                        button_choice = 0;
                        current_menu = "Rooms";
                    }
                    
                break;
                
                case "Triggers":
                    button_amount = ds_map_size(flags);
                    pages = floor(button_amount/15);
                    
                    if button_choice &gt; 14 + page*15{
                        page += 1;
                    }else if button_choice &lt; 15+(page-1)*15{
                        page -= 1;
                    
                    }
                    
                    
                    if keyboard_check_pressed(vk_down){
                        if button_choice &lt; button_amount{
                            
                            button_choice += 1;
                            flag = ds_map_find_next(flags,flag);
                        }else{
                            button_choice = 0;
                            flag = ds_map_find_first(flags);
                        }
                
                    }else if keyboard_check_pressed(vk_up){
                        if button_choice &gt; 0{
                            button_choice-=1;
                            flag = ds_map_find_previous(flags,flag);
                        }else{
                            button_choice = button_amount;
                            flag = ds_map_find_last(flags);
                        }
                        
                    }
                    
                    if keyboard_check_pressed(vk_enter){
                        if(flags[? flag])
                        {
                            flags[? flag] = false;
                        }
                        else
                        {
                            flags[? flag] = true;
                        }
                        
                    }
                    
                    if keyboard_check_pressed(vk_escape){
                        state = "Quit";
                    }
                    
                break;
        }

    break;

    case "Quit":
        instance_destroy();
    
    break;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>oDebugMenu</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch current_menu{
    case "Rooms":
        for(i=0; i&lt;15;i+=1){
            draw_set_alpha(0.5);
            if i+page*14 &lt;= array_length_1d(room_keys)-1{
                if button_choice == i{
                    draw_set_alpha(1);
                    draw_text(begin_x,(begin_y+begin_y*i),room_keys[i+14*page]);
                }else{
                    draw_text(begin_x,(begin_y+begin_y*i),room_keys[i+14*page]);
                }
            }else{
                break;
            }
            
        }
    break;
    case "Encounters":
        for(i=0; i&lt;15;i+=1){
            if i+page*14 &lt;= array_height_2d(encounters)-1{
                if button_choice == i{
                    draw_set_colour(c_red);
                    draw_rectangle(begin_x-10,(begin_y+begin_y*i)-10,begin_x+10,(begin_y+begin_y*i)+10,false);
                    draw_set_colour(c_black);
                }
                if encounters[@ i+14*page,0]{
                    draw_text(begin_x,(begin_y+begin_y*i),string(i));
                }else{
                    draw_set_alpha(0.5);
                    draw_text(begin_x,(begin_y+begin_y*i),string(i));
                }
            }else{
                break;
            }
        }
    break;
    case "Triggers":
    for(i=0; i&lt;15;i+=1){
        if i+page*14 &lt;= array_height_2d(triggers)-1{
            if button_choice == i{
                draw_set_colour(c_red);
                draw_rectangle(begin_x-10,(begin_y+begin_y*i)-10,begin_x+10,(begin_y+begin_y*i)+10,false);
                draw_set_colour(c_black);
            }
            
        }else{
            break;
        
        }
    }
    
    break;
}
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
