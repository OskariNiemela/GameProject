<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sExplode</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Owner = noone;
targetX = 0;
targetY = 0;

Damage = 3;

State = "Idle";
image_speed = 30*DELTA_TIME;
ExplosionTimer = image_number*DELTA_TIME/image_speed;
Timer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch State
{
    case "Explode":
        ExplodingTile = map[targetX,targetY];
        if instance_exists(ExplodingTile.occupant) and ExplodingTile.occupant.PassThrough = false{
            ExplodingTile.occupant.Damage += Damage;
            ExplodingTile.occupant.Shake = true;
            ExplodingTile.occupant.SpriteShakeAmount = 5;
            ExplodingTile.occupant.ShakeTime = 0;
        
        }
        var Neighbors, i, Neighbor;
        NeighborsSize = ds_list_size(map[targetX,targetY].neighbors);
        i = 0;
        repeat(NeighborsSize){
           Neighbor = ds_list_find_value(map[targetX,targetY].neighbors,i);
           if instance_exists(Neighbor.occupant) and Neighbor.occupant.PassThrough = false{
                if Neighbor.occupant.Owner = "Player"{
                    Neighbor.occupant.Damage += Damage;
                    Neighbor.occupant.Shake  = true;
                    Neighbor.occupant.SpriteShakeAmount = 5;
                    Neighbor.occupant.ShakeTime =   0;
                }
            }
            i++;
        }
        for(xx = -1;xx&lt;2;xx++)
        {
            for(a = -2;a&lt;3;a+=4)
            {
                if((targetX+xx&gt;=0)and(targetX+xx&lt;=13)and(targetY+a&gt;=0)and(targetY+a&lt;8))
                {
                    if instance_exists(map[targetX+xx,targetY+a].occupant)
                    {
                        map[targetX+xx,targetY+a].occupant.Damage += Damage;
                        map[targetX+xx,targetY+a].occupant.Shake = true;
                        map[targetX+xx,targetY+a].occupant.SpriteShakeAmount = 5;
                        map[targetX+xx,targetY+a].occupant.ShakeTime = 0;
                    }
                }
            
            }
        }
        
        
        State = "WaitFor";
    break;
    
    case "WaitFor":
        Timer += DELTA_TIME;
        if(Timer &gt;= ExplosionTimer)
        {
            instance_destroy();
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
