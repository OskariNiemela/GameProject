<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPortalCreation</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>11</depth>
  <persistent>0</persistent>
  <parentName>oTerrain</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>InitializeAIStats(0,0,0,0,0,5);
InitializeAISound(sndBlank,sndBlank,sndBlank,sndBlank);
InitializeBasicInfo("Enemy",false,false,false);

CreateAnimation = sPortalCreation;
IdleAnimation = sPortal;
SummonAnimation = sPortalSummon;
DeathAnimation = sPortalClose;
ReturnAnimation = sPortalReturn;

Timer = 0;
image_speed = 12*DELTA_TIME;



State = "CreationStart";

gridX = 0;
gridY = 0;

/*              PORTAL SPECIFIC STUFF*/
//How long we take to summon a critter
SummoningInterval = 10;
TimeSinceSummon = 0;
//What we will summon 
Critter = oGhost;
CreateStart = false;


Damage = 0;
//When we're hit by an attack our sprite will "Shake" 
Shake = false;
SpriteShakeAmount = 0;
//The duration which the sprite will shake (in seconds)
ShakeDuration = 1;
ShakeTime = 0;
ShakeDir = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>oPortal</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch State{
    
    case "CreationStart":
    //Play out the create animation on the tile we are being created at and once thats done summon a critter
        sprite_index = sPortalCreation;
        AnimationTime = image_number*DELTA_TIME/image_speed;
        Timer = 0;
        State = "Create";
    break;
    
    
    case "Create":
    Timer += DELTA_TIME;
        
        if Timer &gt;= AnimationTime{
            //If we've finished our create animation summon a critter and switch our state to Idle
            State = "Idle";
            sprite_index = IdleAnimation;
        
        }
    
    
    break;
    
    case "Idle":
    //Count up to the time we will summon another critter   
        TimeSinceSummon += DELTA_TIME;
        if TimeSinceSummon &gt;= SummoningInterval{
            State = "Summon";
        }
    break;

    case"Summon":
    //Change animation to the summon animation and once thats done summon a critter
        if sprite_index != SummonAnimation{
            sprite_index = SummonAnimation;
            image_index = 0;
            AnimationTime = image_number*DELTA_TIME/image_speed;
            Timer = 0;
        }
        Timer += DELTA_TIME;
        
        if Timer &gt;= AnimationTime{
            PortalSummon();
            State = "Return";
            TimeSinceSummon = 0;
        
        }
    
    break;
    
    case "Return":
        if sprite_index != ReturnAnimation{
            sprite_index = ReturnAnimation;
            image_index = 0;
            AnimationTime = image_number*DELTA_TIME/image_speed;
            Timer = 0;
        }
        Timer += DELTA_TIME;
        
        if Timer &gt;= AnimationTime{
            State = "Idle";
            sprite_index = IdleAnimation;
        
        }
    
    
    break;

    case"Dead":
    //Play the deathanimation and delete ourselves.
        if sprite_index != DeathAnimation{
            sprite_index = DeathAnimation;
            image_index = 0;
            AnimationTime = image_number*DELTA_TIME/image_speed;
            Timer = 0;
        }
        Timer += DELTA_TIME;
        
        if Timer &gt;= AnimationTime{
            map[gridX,gridY].occupant = noone;
            instance_destroy();
        
        }
    break;
    
}

if Damage &gt; 0{
    if State != "Dead"{
        HitPoints -= Damage;
        Damage = 0;
        if HitPoints &lt;= 0{
            State = "Dead"; 
        }
    }else{
        Damage = 0;
    }
    
}


if Shake{
    ShakeTime += DELTA_TIME;
    if ShakeTime &lt; ShakeDuration{
        CurrentX = map[gridX,gridY].x;
        x = CurrentX + SpriteShakeAmount*(sign(ShakeDir)*(ShakeDuration-ShakeTime));
        ShakeDir = ShakeDir *(-1);
    }else{
        Shake = false;
        ShakeTime = 0;
        SpriteShakeAmount = 0;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
