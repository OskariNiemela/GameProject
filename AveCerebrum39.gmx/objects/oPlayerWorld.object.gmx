<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>60</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>oFriendlyMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x,y,oPlayerListener);
WalkingSound = noone;
MoveInputs[0] = vk_right;
MoveInputs[1] = vk_up;
MoveInputs[2] = vk_left;
MoveInputs[3] = vk_down;
Walking = 0;
OverworldCharacterInitialize(sPlayer64Right,sPlayer64Left,sPlayer64Up,sPlayer64Down,sPlayer64UpIdle,sPlayer64RightIdle,sPlayer64LeftIdle,sPlayer64Down);
MoveDir = 0;
AnimationDirection = "None";
MovingAnim = false;
IdleRight = sPlayer64RightIdle;
IdleLeft = sPlayer64LeftIdle;
IdleUp = sPlayer64UpIdle;
IdleDown = sPlayer64DownIdle;

ParseTxtToDialogue("Player");

MySpeed = 240*DELTA_TIME;
MoveSpeed = 240;
flash = 0;
flashTim = 1;
flashNo = 0;

BattleScreenObject = oPlayerBattle;

// AnimationSpeed = 8*DELTA_TIME
image_speed = 8*DELTA_TIME;

sprite_index = sPlayer64Right;

//Speed
BattleStats[0] = 4;
//MAttack
BattleStats[1] = 0;
//RAttack
BattleStats[2] = 1;
//Mdef
BattleStats[3] = 0;
//Rdef
BattleStats[4] = 0;
//Crit%
BattleStats[4] = 0;
//HP
BattleStats[5] = 10;
Speed = BattleStats[0];
ModSpeed = 0;

EnemyHit = false;


if oGame.PlayerSprite != noone{
    sprite_index = oGame.PlayerSprite;
}else{
    sprite_index = sPlayer64RightIdle;
}

debugmode = false;

State = "Idle";

textPortrait = sNoPortrait;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(keyboard_check_pressed(vk_space))
{
    flash = 1.0;
    flashNo = 0.35;
}


MovingAnim = false;
depth = MaxDepth/(y/20);
switch State{
    case "Idle":
        var MoveXinput = 0;
        var MoveYinput = 0;
        MoveSpeedThisFrame = round(MoveSpeed*global.SecondsPassedThisFrame);
        for ( var i = 0; i &lt; array_length_1d(MoveInputs); i++){
            var Key = MoveInputs[i];
            if keyboard_check(Key) {
                var ThisAngle = i*90;
                MoveXinput += lengthdir_x(1, ThisAngle);
                MoveYinput += lengthdir_y(1, ThisAngle);
            }
        }
         
        var moving = ( point_distance(0,0,MoveXinput,MoveYinput) &gt; 0 );
        if moving{
            MoveDir = point_direction(0,0,MoveXinput,MoveYinput);
            Movement(MoveSpeedThisFrame,MoveDir);
            if MovingAnim{
                switch AnimationDirection{
                    case "Right":
                        if abs(angle_difference(90,MoveDir)) &lt;= 25{
                            AnimationDirection = "Up";
                            sprite_index = MoveUp;
                            image_index = 0;
                            image_speed = OverworldAnimSpeed;
                        }else if abs(angle_difference(180,MoveDir)) &lt;= 45{
                            AnimationDirection = "Left";
                            sprite_index = MoveLeft;
                            image_index = 0;
                            image_speed = OverworldAnimSpeed;
                        }else if abs(angle_difference(270,MoveDir)) &lt;= 25{
                            AnimationDirection = "Down";
                            sprite_index = MoveDown;
                            image_index = 0;
                            image_speed = OverworldAnimSpeed;
                        }
                    break;
                    
                    case "Up":
                        if abs(angle_difference(0,MoveDir)) &lt;= 25{
                            AnimationDirection = "Right";
                            sprite_index = MoveRight;
                            image_index = 0;
                            image_speed = OverworldAnimSpeed;
                        }else if abs(angle_difference(180,MoveDir)) &lt;= 25{
                            AnimationDirection = "Left";
                            sprite_index = MoveLeft;
                            image_index = 0;
                            image_speed = OverworldAnimSpeed;
                        }else if abs(angle_difference(270,MoveDir)) &lt;= 45{
                            AnimationDirection = "Down";
                            sprite_index = MoveDown;
                            image_index = 0;
                            image_speed = OverworldAnimSpeed;
                        }
                    break;
                    
                    case "Left":
                        if abs(angle_difference(0,MoveDir)) &lt;= 45{
                            AnimationDirection = "Right";
                            sprite_index = MoveRight;
                            image_index = 0;
                            image_speed = OverworldAnimSpeed;
                        }else if abs(angle_difference(90,MoveDir)) &lt;= 25{
                            AnimationDirection = "Up";
                            sprite_index = MoveUp;
                            image_index = 0;
                            image_speed = OverworldAnimSpeed;
                        }else if abs(angle_difference(270,MoveDir)) &lt;= 25{
                            AnimationDirection = "Down";
                            sprite_index = MoveDown;
                            image_index = 0;
                            image_speed = OverworldAnimSpeed;
                        }
                    break;
                    
                    case "Down":
                        if abs(angle_difference(0,MoveDir)) &lt;= 25{
                            AnimationDirection = "Right";
                            sprite_index = MoveRight;
                            image_index = 0;
                            image_speed = OverworldAnimSpeed;
                        }else if abs(angle_difference(90,MoveDir)) &lt;= 45{
                            AnimationDirection = "Up";
                            sprite_index = MoveUp;
                            image_index = 0;
                            image_speed = OverworldAnimSpeed;
                        }else if abs(angle_difference(180,MoveDir)) &lt;= 25{
                            AnimationDirection = "Left";
                            sprite_index = MoveLeft;
                            image_index = 0;
                            image_speed = OverworldAnimSpeed;
                        }
                    break;
                    
                    case "None":
                        if abs(angle_difference(0,MoveDir)) &lt;= 45{
                            AnimationDirection = "Right";
                            sprite_index = MoveRight;
                            image_index = 0;
                            image_speed = OverworldAnimSpeed;
                        }else if abs(angle_difference(90,MoveDir)) &lt;= 45{
                            AnimationDirection = "Up";
                            sprite_index = MoveUp;
                            image_index =0;
                            image_speed = OverworldAnimSpeed;
                        }else if abs(angle_difference(180,MoveDir)) &lt;= 45{
                            AnimationDirection = "Left";
                            sprite_index = MoveLeft;
                            image_index = 0;
                            image_speed = OverworldAnimSpeed;
                        }else if abs(angle_difference(270,MoveDir)) &lt;= 45{
                            AnimationDirection = "Down";
                            sprite_index = MoveDown;
                            image_index = 0;
                            image_speed = OverworldAnimSpeed;
                        }
                    break;                        
                
                }
            }else{
                switch sprite_index{
                    case sPlayer64Right:
                    case sPlayer64RightIdle:
                        sprite_index = sPlayer64RightIdle;
                    break;
                
                    case sPlayer64Left:
                    case sPlayer64LeftIdle:
                        sprite_index = sPlayer64LeftIdle;
                    break;
                    
                    case sPlayer64Up:
                    case sPlayer64UpIdle:
                        sprite_index = sPlayer64UpIdle;
                    break;
                    
                    case sPlayer64Down:
                    case sPlayer64DownIdle:
                        sprite_index = sPlayer64DownIdle;
                    break;
                    
                    default:
                        sprite_index = sPlayer64RightIdle;
                    break;
                }
                image_index = 0;
                image_speed = 0;
                AnimationDirection = "None";
            }
            Surface = instance_place(x,y,oSurface);
            
            //if Walking = 0{
             //    audio_play_sound_on(oSFX.SFXEmitter,sndGrass1,10,false);
             //   Walking = 1;
            //}else{
                switch AnimationDirection{
                    case "Left":
                    case "Right":
                        if image_index &gt; 0.95 and image_index &lt; 1.07{
                                
                                if instance_exists(Surface){
                                    audio_play_sound_on(oSFX.SFXEmitter,Surface.SurfaceSound,false,8);
                                }else{
                                    audio_play_sound_on(oSFX.SFXEmitter,sndGrass1,false,8);
                                }
                        }else if image_index &gt; 4.95 and image_index &lt; 5.07{
                                if instance_exists(Surface){
                                     audio_play_sound_on(oSFX.SFXEmitter,Surface.SurfaceSound,false,8);
                                }else{
                                     audio_play_sound_on(oSFX.SFXEmitter,sndGrass1,false,8);
                                }
                        }
                    
                    break;
                    
                    case "Up":
                    case "Down":
                        if image_index &gt; 0.95 and image_index &lt; 1.07{
                                if instance_exists(Surface){
                                     audio_play_sound_on(oSFX.SFXEmitter,Surface.SurfaceSound,false,8);
                                }else{
                                 audio_play_sound_on(oSFX.SFXEmitter,sndGrass1,false,8);
                                }
                        }else if image_index &gt; 3.95 and image_index &lt; 4.07{
                                if instance_exists(Surface){
                                     audio_play_sound_on(oSFX.SFXEmitter,Surface.SurfaceSound,false,8);
                                }else{
                                 audio_play_sound_on(oSFX.SFXEmitter,sndGrass1,false,8);
                                }
                        }
                    break;
                    
                }
                //}
            
        }else{
            switch sprite_index{
                    case sPlayer64Right:
                    case sPlayer64RightIdle:
                        sprite_index = sPlayer64RightIdle;
                    break;
                
                    case sPlayer64Left:
                    case sPlayer64LeftIdle:
                        sprite_index = sPlayer64LeftIdle;
                    break;
                    
                    case sPlayer64Up:
                    case sPlayer64UpIdle:
                        sprite_index = sPlayer64UpIdle;
                    break;
                    
                    case sPlayer64Down:
                    case sPlayer64DownIdle:
                        sprite_index = sPlayer64DownIdle;
                    break;
                    
                    default:
                        sprite_index = sPlayer64RightIdle;
                    break;
            }
            image_index = 0;
            image_speed = 0;
            AnimationDirection = "None";
        }
        
        //Encontering an enemy in the overworld.
        EnemyMet = collision_point(x,y,oEnemy,false,true);
        BossMet = collision_point(x,y,oBoss,false,true);
        if instance_exists(EnemyMet) and EnemyHit = false{
            GoIntoEncounter(x,y,room,EnemyMet);
            State = "Fading";
            EnemyHit = true;
        }
        else if instance_exists(BossMet) and EnemyHit = false
        {
            GoIntoEncounter(x,y,BossMet.GoToRoom,BossMet);
            State = "Fading";
            EnemyHit = true;
        }
        //Talking to NPC
        if keyboard_check_pressed(ord("Z")){
            //if we're facing left, check the space immediately to our left for npc's to talk to.
            switch sprite_index{
                case sPlayer64Left:
                case sPlayer64LeftIdle:
                    Friend = collision_rectangle(x-54,y-22,x,y+22,oFriendly,false,true);
                    Stuff  = collision_rectangle(x-54,y-22,x,y+22,oStuff, false,true);
                        if instance_exists(Friend){
                            with Friend{
                                State = "Talk";
                            }
                            State = "Talking";
                        }else if instance_exists(Stuff){
                                    with Stuff{
                                        State = "Talk";
                                    }
                                    State = "Talking";
                        }
                break;
                case  sPlayer64Right:
                case  sPlayer64RightIdle:
                     Friend = collision_rectangle(x,y-22,x+54,y+22,oFriendly,false,true);
                     Stuff  = collision_rectangle(x,y-22,x+54,y+22,oStuff,   false,true);
                            if instance_exists(Friend){
                                with Friend{
                                    State = "Talk";
                                }
                                State = "Talking";
                            }else if instance_exists(Stuff){
                                    with Stuff{
                                        State = "Talk";
                                    }
                                    State = "Talking";
                            }
                break;
                case sPlayer64Up:
                case sPlayer64UpIdle:
                    Friend = collision_rectangle(x-22,y-54, x+22, y ,oFriendly,false,true);
                    Stuff  = collision_rectangle(x-22,y-54, x+22, y , oStuff, false,true);
                            if instance_exists(Friend){
                                with Friend{
                                    State = "Talk";
                                }
                                State = "Talking";
                            }else if instance_exists(Stuff){
                                    with Stuff{
                                        State = "Talk";
                                    }
                                    State = "Talking";
                            }
                break;
                case sPlayer64Down:
                case sPlayer64DownIdle:
                    Friend = collision_rectangle(x-22,y, x+22, y+54 ,oFriendly,false,true);
                    Stuff  = collision_rectangle(x-22,y, x+22, y+54 ,oStuff, false,true);
                                if instance_exists(Friend){
                                    with Friend{
                                        State = "Talk";
                                    }
                                    State = "Talking";
                                }else if instance_exists(Stuff){
                                    with Stuff{
                                        State = "Talk";
                                    }
                                    State = "Talking";
                                }
                break;
            }
            
        }
    break;

    
    case "Fading":
        image_index = 0;
        image_speed = 0;
        if instance_exists(oGame.PlayerSprite){
            sprite_index = oGame.PlayerSprite;
        }
    break;
    
    case"Event":
        EventScript();
    break;
    
    case"Talking":
        switch sprite_index{
                    case sPlayer64Right:
                    case sPlayer64RightIdle:
                        sprite_index = sPlayer64RightIdle;
                    break;
                
                    case sPlayer64Left:
                    case sPlayer64LeftIdle:
                        sprite_index = sPlayer64LeftIdle;
                    break;
                    
                    case sPlayer64Up:
                    case sPlayer64UpIdle:
                        sprite_index = sPlayer64UpIdle;
                    break;
                    
                    case sPlayer64Down:
                    case sPlayer64DownIdle:
                        sprite_index = sPlayer64DownIdle;
                    break;
                    
                    default:
                        sprite_index = sPlayer64RightIdle;
                    break;
            }
        image_index = 0;
    
    break;
}

    
    
    
    
if keyboard_check_pressed(ord("Y")) and !instance_exists(oDebugMenu){
    instance_create(x,y,oDebugMenu);
}
    
    
    
    
    
    
    




















</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

draw_sprite(sprite_index,image_index,round(x),round(y));

draw_text(x,y-25,working_directory);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
