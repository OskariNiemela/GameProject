<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sTextBox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xMargin = 10;
yMargin = 10;

Owner = noone;


Ready = false;
Next = false;
//write your messages in an array, starting at 0


//0 is the first number in our array, and the message we are currently at
MessageCurrent = 0; 
 //Check how many messages there are in total

//this is what we 'write' out. It's blank right now
MessageDraw = "";
//the speed at which new characters are added
Increase = (20*DELTA_TIME); 
//how many characters have already been drawn
CharactersNow = 0;
TotalCharacters = 0;
//if we hold 'Z', the text will render faster
Hold = 0; 

//get the number of characters in the current message


//Multiple lines
//Remember which line we're currently writing on
currentLine = "One";

//Define a variable of from where we start writing a new line(for when we need the text to start in a new line
LineOneStart   = 0;
LineTwoStart   = 0;
LineThreeStart = 0;
//Store the next character to be drawn, in order to determine whether or not we can fit that character on this line or if we need to change lines.
NextCharacter = noone;
//Three text lines to store the texts that will be drawn on their respective lines
TextLineOne  = "";
TextLineTwo  = "";
TextLineThree= "";


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>oTextbox</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
 //if current character count is less than the amount in current message* 
if (TotalCharacters &lt; MessageLength) and Ready {

    //Check which line we're currently drawing to
    if currentLine = "One"{
        //hold is true or false if we hold 'Z' or not
        Hold = keyboard_check(ord("Z")); 
        //increase speed based on hold
        CharactersNow += Increase;
        //copy string to current character
        TextLineOne = string_copy(Messages[MessageCurrent], LineOneStart, floor(CharactersNow));
        if string_width(TextLineOne) &gt;= 1860{
            CharactersNow = (CharactersNow - floor(CharactersNow));
            LineTwoStart = (floor(TotalCharacters)+1);
            currentLine = "Two";
        }
       
    }
    else if currentLine = "Two"{
        //hold is true or false if we hold 'Z' or not
        Hold = keyboard_check(ord("Z")); 
        //increase speed based on hold
        CharactersNow += Increase * (1 + Hold);
        //copy string to current character
        TextLineTwo = string_copy(Messages[MessageCurrent], LineTwoStart, floor(CharactersNow));
        if string_width(TextLineTwo) &gt;= 1860{
            CharactersNow = (CharactersNow - floor(CharactersNow));
            LineThreeStart = (floor(TotalCharacters)+1);
            currentLine = "Three";
        }
    
    }else if currentLine = "Three"{
          //hold is true or false if we hold 'Z' or not
        Hold = keyboard_check(ord("Z")); 
        //increase speed based on hold
        CharactersNow += Increase * (1 + Hold);
        //copy string to current character
        TextLineThree = string_copy(Messages[MessageCurrent], LineThreeStart, floor(CharactersNow));
    
    }
    
    TotalCharacters += Increase * (1 + Hold);
    
} 
//if current character is more than the amount in the current message
else if TotalCharacters &gt;= MessageLength {
    var LineOneLength, LineTwoLength
    if currentLine = "One"{
       TextLineOne = string_copy(Messages[MessageCurrent], LineOneStart, MessageLength);
    }else if currentLine = "Two"{
        TextLineTwo = string_copy(Messages[MessageCurrent], LineTwoStart, MessageLength);
    }else if currentLine = "Three"{
        TextLineThree = string_copy(Messages[MessageCurrent], LineThreeStart, MessageLength);
    
    }
    //if we press Z...
    if (keyboard_check_pressed(ord("Z"))) {
        //if there are more messages left to show (0 -&gt; 6, in our case) 
        if (MessageCurrent &lt; (MessageEnd-1)) { 
            //increase the message by 1
            MessageCurrent += 1;
            //get the new character length for message
            MessageLength = string_length(Messages[MessageCurrent]); 
            //set the characters back to 0
            CharactersNow = 0;
            TotalCharacters = 0; 
            //clear the drawn text
            currentLine = "One";
            TextLineOne  = "";
            TextLineTwo  = "";
            TextLineThree= "";
            LineTwoStart = 0;
            LineThreeStart = 0;
            MessageDraw = "";
            Ready = true;
            Next = false;
        }
        //if our messages are done
        else {
            EventManager.NextOrder = true;
            //destroy the object
            instance_destroy(); 
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_set_valign(fa_top);
draw_set_halign(fa_left);
draw_set_color(c_white);
draw_set_font(fText);
//Draw the message

draw_text(0+xMargin,y+yMargin, TextLineOne);
draw_text(0+xMargin,y+yMargin+string_height(TextLineOne), TextLineTwo);
draw_text(0+xMargin,y+yMargin+string_height(TextLineOne)+string_height(TextLineTwo), TextLineThree);



draw_set_color(c_black);

draw_text(1920/2, 1080/2, string(Messages[0]));


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
