<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPl80Torso</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>oTorso</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Move = "No";
StopAbilities = false;
MoveRight = sPl80TorsoMoveLeft;
MoveLeft = sPl80TorsoMoveRight;
MoveUp = sPl80TorsoMoveRight;
MoveDown = sPl80TorsoMoveLeft;

StationaryRight = sPl80Torso;
StationaryLeft = sPl80TorsoLeft;

PassThrough = true;

gridX = 0;
gridY = 0;
OwnerX = 0;
OwnerY = 0;

FlightSpeed = 1000*DELTA_TIME;

FlightTime = 0;

Owner = noone;
PartyNumber = noone;

State = "FlightPath";

DestinationX = 0;
DestinationY = 0;

Damage = 0;

Abilities[0] = oTaunt;
Abilities[1] = oTaunt;
Abilities[2] = oTaunt;

TeamAbility[0] = oTaunt;

AbilityIcon[0] = sTaunt;
AbilityIcon[1] = sTaunt;
AbilityIcon[2] = sTaunt;

UsingAbility = noone;
BuffedSpeed = false;
BuffedHealth = false;


AbilityCooldown1Max = 100;
AbilityCooldown2Max = 100;
AbilityCooldown3Max = 100;

AbilityCooldown1 = 100;
AbilityCooldown2 = 100;
AbilityCooldown3 = 100;

for(i=0;i&lt;3;i+=1){
    AbilitiesLockedOut[i] = true;
}

image_speed = AnimationSpeed;

AttackTime = 0;
MovementTime = 0;

DeathTimer = 10;

AttackTimer = 0;
MovementTimer = 0;

Threat = 0;
MaxThreat = 0;
ThreatLevel = 0;

image_speed = AnimationSpeed;

ModHP = 0;
ModAttack = 1;
ModSpeed   = 0;
ModCritStr = 0;
ModThreat  = 0;
CanTakeDamage = false;
TimerStart =false;

InitializeTimerSprites();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
/*MovingTorso();

switch State{  
    case "Stunned":
        State = "Idle";
    break; 

    case  "Return":
        State = "Idle";
    break;
    
    case"Attack":
        State = "Idle";
    break;
    
    case "UsingAbility":
        State = "Idle";
    break;
    
    case "AbilityAnimation":
        State = "Idle";
    
    break;
    
    case "Attacking":
        State = "Idle";
    break;
    
    
    //Fly toward our intended position on the map
    case"FlightPath":
        if DestinationX = 0 or DestinationY = 0{
            DestinationX = map[gridX,gridY].x;
            DestinationY = map[gridX,gridY].y;
            Direction = point_direction(x,y,DestinationX,DestinationY); 
            Distance = point_distance(x,y,DestinationX,DestinationY);
            FlightTime = (Distance*DELTA_TIME)/FlightSpeed
            if FlightTime &lt; 0.8{
                FlightTime = 0.8;
                FlightSpeed = Distance*2*DELTA_TIME;
            
            }
        }
        direction = Direction;
        speed = FlightSpeed;
        FlightTime -= DELTA_TIME;
        if FlightTime &lt;= 0{
            speed = 0;
            direction = 0;
            x = DestinationX;
            y = DestinationY;
            State = "Idle";
        }
    break;
    
    case "MoveUp":
        if  sprite_index!= MoveUp{
            sprite_index = MoveUp;
            DestinationX = map[gridX,gridY].x;
            DestinationY = map[gridX,gridY].y;
            AnimationTime = image_number*DELTA_TIME/image_speed;
            Timer = 0;
            FlightSpeed = point_distance(x,y,DestinationX,DestinationY)*DELTA_TIME/AnimationTime;
            direction = point_direction(x,y,DestinationX,DestinationY);
            speed = FlightSpeed;
        }
        Timer += DELTA_TIME;
        if Timer &gt;= AnimationTime{
            x = DestinationX;
            y = DestinationY;
            State = "Idle";
            speed = 0;
            direction = 0
            sprite_index = StationaryLeft;
            Timer = 0;
        
        }
        
    break;
    
    case "MoveDown":
        if  sprite_index!= MoveDown{
            sprite_index = MoveDown;
            DestinationX = map[gridX,gridY].x;
            DestinationY = map[gridX,gridY].y;
            AnimationTime = image_number*DELTA_TIME/image_speed;
            Timer = 0;
            FlightSpeed = point_distance(x,y,DestinationX,DestinationY)*DELTA_TIME/AnimationTime;
            direction = point_direction(x,y,DestinationX,DestinationY);
            speed = FlightSpeed;
        }
        Timer += DELTA_TIME;
        if Timer &gt;= AnimationTime{
            x = DestinationX;
            y = DestinationY;
            State = "Idle";
            speed = 0;
            direction = 0
            sprite_index = StationaryRight;
            Timer = 0;
        
        }
    break;
    
    case "MoveLeft":
        if  sprite_index!= MoveLeft{
            sprite_index = MoveLeft;
            DestinationX = map[gridX,gridY].x;
            DestinationY = map[gridX,gridY].y;
            AnimationTime = image_number*DELTA_TIME/image_speed;
            Timer = 0;
            FlightSpeed = point_distance(x,y,DestinationX,DestinationY)*DELTA_TIME/AnimationTime;
            direction = point_direction(x,y,DestinationX,DestinationY);
            speed = FlightSpeed;
        }
        Timer += DELTA_TIME;
        if Timer &gt;= AnimationTime{
            x = DestinationX;
            y = DestinationY;
            State = "Idle";
            speed = 0;
            direction = 0
            sprite_index = StationaryLeft;
            Timer = 0;
        
        }
    break;
    
    case "MoveRight":
    if  sprite_index!= MoveRight{
            sprite_index = MoveRight;
            DestinationX = map[gridX,gridY].x;
            DestinationY = map[gridX,gridY].y;
            AnimationTime = image_number*DELTA_TIME/image_speed;
            Timer = 0;
            FlightSpeed = point_distance(x,y,DestinationX,DestinationY)*DELTA_TIME/AnimationTime;
            direction = point_direction(x,y,DestinationX,DestinationY);
            speed = FlightSpeed;
        }
        Timer += DELTA_TIME;
        if Timer &gt;= AnimationTime{
            x = DestinationX;
            y = DestinationY;
            State = "Idle";
            speed = 0;
            direction = 0
            sprite_index = StationaryRight;
            Timer = 0;
        
        }
    break;   
    
     
    case "Idle":
        
    break;
    
    case "FuseBack":
        Owner.BodyIsWhole = true;
        Owner.State = "Idle";
        with Owner{
            sprite_index = Idle;
        }
        oCursor.Party[Owner.PartyNumber] = Owner;
        instance_destroy();
    break;


       
    
}
*/




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
