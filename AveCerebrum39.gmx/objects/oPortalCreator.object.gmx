<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPortalCreator</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oTerrain</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>InitializeBasicInfo("n/a",true,false,true);

DestinationX = 0;
DestinationY = 0;
FlightSpeed = 1500*DELTA_TIME;
State = "CheckDestination";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch State{
    case "CheckDestination":
        if map[DestinationGridX,DestinationGridY].occupant = noone{
            map[DestinationGridX,DestinationGridY].occupant = id;
            State = "FlyToDestination";
        }else{
            var Neighbours,Index,Neighbour;
            Index = 0;
            Neighbours = ds_list_size(map[DestinationGridX,DestinationGridY].neighbors);
            for (i=0;i&lt;Neighbours;i+=1){
                Neighbour = ds_list_find_value(map[DestinationGridX,DestinationGridY].neighbors,Index);
                //Check the neighboring tiles if our original destination is not open
                if Neighbour.occupant = noone{
                    DestinationGridX = Neighbour.gridX;
                    DestinationGridY = Neighbour.gridY;
                    map[DestinationGridX,DestinationGridY].occupant = id;
                    break;
                }
                Index += 1;
                if Index = Neighbours{
                    instance_destroy();
                }
                
            }
        }
    
    break;

    case "FlyToDestination":
        DestinationX = map[DestinationGridX,DestinationGridY].x;
        DestinationY = map[DestinationGridX,DestinationGridY].y;
        Direction = point_direction(x,y,DestinationX,DestinationY); 
        Distance = point_distance(x,y,DestinationX,DestinationY);
        FlightTime = (Distance*DELTA_TIME)/FlightSpeed
        direction = Direction;
        image_angle = Direction;
        speed = FlightSpeed;
        State = "Flying";  
    
    
    break;
    
    case "Flying":
        FlightTime -= DELTA_TIME;
        if FlightTime &lt;= 0{
            x = DestinationX;
            y = DestinationY;
            State = "CreatePortalAtLocation";
        }   
    
    
    break;
    
    case "CreatePortalAtLocation":
        MyPortal = instance_create(DestinationX,DestinationY,oPortal);
        MyPortal.gridX = DestinationGridX;
        MyPortal.gridY = DestinationGridY;
        map[DestinationGridX,DestinationGridY].occupant = MyPortal;
        instance_destroy();
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
