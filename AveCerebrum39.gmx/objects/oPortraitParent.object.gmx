<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(Owner){
    x = Owner.x;
    y = Owner.y;
    depth = Owner.depth-1;
    
    
    HealthBarX1 = x-31;
    HealthBarY1 = y+25;
    HealthBarX2 = x+31;
    HealthBarY2 = y+35;
    HealthBarAddition = HealthBarX2-(HealthBarX1);
    
    TimerX1 = x-31;
    AttackTimerY1 = y-40; 
    MovementTimerY1 = y-24;
    //TimerAddition = abs(TimerX2-(TimerX1+2));
    
    AbilityIconY = HealthBarY1-16;
    AbilityIcon1X = x-31;
    AbilityIcon2X = x-8;
    AbilityIcon3X = x+15;
    
    if Made = false{
        Ability1MaxCooldown=Owner.AbilityCooldown1Max;
        Ability2MaxCooldown=Owner.AbilityCooldown2Max;
        Ability3MaxCooldown=Owner.AbilityCooldown3Max;
        MaxHitpointsOwner = Owner.MaxHitPoints;
        AttackTime = Owner.AttackTime;
        MovementTime = Owner.MovementTime;
        Made = true;
    
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if instance_exists(Owner) and Owner.State != "Death" and Owner.BodyIsWhole{
    /*          MOVEMENTTIMER           */
    if  Owner.MovementTimer &gt; 0{
    //Draw the indicators for the movement timers.
        draw_sprite(sMovementTimer,round(19*Owner.MovementTimer/Owner.MovementTime),TimerX1,MovementTimerY1);
        if Owner.Move != "No"{
            switch Owner.Move{
                case "Left":
                    draw_sprite(sMovementArrowLeft,0,x,y-16);
                break;
                
                case "Right":
                    draw_sprite(sMovementArrowRight,0,x,y-16);
                break;
                
                case "Up":
                    draw_sprite(sMovementArrowUp,0,x,y-16);
                break;
                
                case "Down":
                    draw_sprite(sMovementArrowDown,0,x,y-16);
                break;
            }
        }
    }
    
    /*          ATTACKTIMER         */
    if Owner.AttackTimer &gt; 0{
        draw_sprite(sAttackTimer,19*Owner.AttackTimer/Owner.AttackTime,TimerX1,AttackTimerY1);
    }
    
    /*          HEALTHBAR           */
    //Choose the colour of the healthbar
    if Owner.HitPoints &gt; Owner.MaxHitPoints/2{
        draw_set_color(c_green);
    }else{
        draw_set_color(c_yellow);
    }
    //Draw the amount of health we have
    draw_rectangle(HealthBarX1+1,HealthBarY1+1,HealthBarX1+HealthBarAddition*(Owner.HitPoints/MaxHitpointsOwner),HealthBarY2,false);
    
    //Then draw the frame around it
    draw_set_color(c_black);
    draw_rectangle(HealthBarX1,HealthBarY1,HealthBarX2,HealthBarY2,true);
    
    /*          ABILITY ICONS           */
    //Draw the ability Icon
    draw_sprite(Owner.AbilityIcon[0],0,AbilityIcon1X,AbilityIconY);
    
    if Owner.AbilitiesLockedOut[0]{
        draw_sprite(sLockedOut,0,AbilityIcon1X,AbilityIconY);
    
    }
    //Then if its on cooldown
    if Owner.AbilityCooldown1 &gt; 0{
        //Draw a "shadow" over it that corresponds to how much of the cooldown is left.
        draw_set_alpha(0.8);
        draw_set_color(c_black);
        draw_rectangle(AbilityIcon1X,AbilityIconY,AbilityIcon1X+16*(Owner.AbilityCooldown1/Ability1MaxCooldown),AbilityIconY+16,false);
    }
    draw_sprite(Owner.AbilityIcon[1],0,AbilityIcon2X,AbilityIconY);
    if Owner.AbilitiesLockedOut[1]{
        draw_sprite(sLockedOut,0,AbilityIcon2X,AbilityIconY);
    }
    if Owner.AbilityCooldown2 &gt; 0{
        draw_set_alpha(0.8);
        draw_set_color(c_black);
        draw_rectangle(AbilityIcon2X,AbilityIconY,AbilityIcon2X+16*(Owner.AbilityCooldown2/Ability2MaxCooldown),AbilityIconY+16,false);
    }
    draw_sprite(Owner.AbilityIcon[2],0,AbilityIcon3X,AbilityIconY);
    if Owner.AbilitiesLockedOut[2]{
        draw_sprite(sLockedOut,0,AbilityIcon3X,AbilityIconY);
    }
    if Owner.AbilityCooldown3 &gt; 0{
        draw_set_alpha(0.8);
        draw_set_color(c_black);
        draw_rectangle(AbilityIcon3X,AbilityIconY,AbilityIcon3X+16*(Owner.AbilityCooldown3/Ability3MaxCooldown),AbilityIconY+16,false);
    }
    draw_set_alpha(1);
    draw_set_color(c_white);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
