<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sStunGrenade</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>State = "MakeFlightPath";

HeightOfArc = 100;

StunDuration = 4;

FlightSpeed = 800*DELTA_TIME;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch State{
    case "MakeFlightPath":
        //Make an arcing flight path for the grenade to take.
        DestinationX = map[TargetGridX,TargetGridY].x;
        DestinationY = map[TargetGridX,TargetGridY].y;
        direction = point_direction(x,y,DestinationX,DestinationY);
        FlightAmount = point_distance(x,y,DestinationX,DestinationY);
        FlightTime = FlightAmount*DELTA_TIME/FlightSpeed;
        //How long it should take to reach the peak of the arc (when the grenade is halfway there.)
        ArcingTime = FlightTime/2;
        speed = FlightSpeed;
        //At what speed the grenade should ascend to reach the peak.
        ArcingSpeed = (HeightOfArc/ArcingTime)*DELTA_TIME;
        Timer = 0;
        State = "Flight";
    break;

    case "Flight":
        //Fly toward our destination while arcing (peak of the arc should be at the midle of flight).
        image_angle += 360*DELTA_TIME;
        Timer += DELTA_TIME;
        /*
        y -= ArcingSpeed;
        ArcingSpeed -= ArcingSpeed*ArcingTime;
        */
        
        if Timer &gt;= FlightTime{
            x = DestinationX;
            y = DestinationY;
            State = "Explode";
        }
        
    break;
    
    case "Explode":
        //Explode on contact with the tile were supposed to land on.
        StunBlast = instance_create(x,y,oStunningBlast);
        StunBlast.gridX = TargetGridX;
        StunBlast.gridY = TargetGridY;
        instance_destroy();
    break;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
