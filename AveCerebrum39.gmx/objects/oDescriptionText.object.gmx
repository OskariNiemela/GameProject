<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sTextBox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xMargin = 10;
yMargin = 10;

Owner = noone;

Ready = false;
Next = false;

ViewHeight = view_hview[0];
ViewWidth  = view_wview[0];

LinesOmitted = 0;


xScale = view_wview[0]/sprite_get_width(sTextBox);
yScale = (view_hview[0]*1/4)/sprite_get_height(sTextBox);


StartingX = view_xview[0];
StartingY = view_yview[0]+view_hview-(sprite_get_height(sTextBox)*yScale);

TextMaxWidth = ViewWidth  - xMargin;
TextMaxHeight= ViewHeight - yMargin;

//write your messages in an array, starting at 0


//0 is the first number in our array, and the message we are currently at
MessageCurrent = 0; 
 //Check how many messages there are in total

//this is what we 'write' out. It's blank right now
MessageDraw = "";
//the speed at which new characters are added
Increase = (20*DELTA_TIME); 
//how many characters have already been drawn
CharactersNow = 0;
TotalCharacters = 0;
//if we hold 'Z', the text will render faster
Hold = 0; 

//get the number of characters in the current message


//Multiple lines
//Remember which line we're currently writing on
currentLine = "One";

//Define a variable of from where we start writing a new line(for when we need the text to start in a new line
LineOneStart   = 0;
LineTwoStart   = 0;
LineThreeStart = 0;
LineFourStart  = 0;
//Store the next character to be drawn, in order to determine whether or not we can fit that character on this line or if we need to change lines.
NextCharacter = "";
//Three text lines to store the texts that will be drawn on their respective lines
TextLineOne  = "";
TextLineTwo  = "";
TextLineThree= "";
TextLineFour = "";

//Stuff needed to produce text sounds
textBoxSound = audio_emitter_create();
textSound = sndText;
lastCharCount = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = StartingX;
y = StartingY;
 //if current character count is less than the amount in current message* 
if (TotalCharacters+CharactersNow &lt; MessageLength) and Ready {
    NextCharacter = "";
    //Check which line we're currently drawing to
    switch currentLine{
        case "One":
            //Store the next character we should write, this is so we can check whether writing this character goes over the character width limit, if it does proceed to the next line of text
            NextCharacter = string_copy(Messages[MessageCurrent],floor(CharactersNow)+1,1);
            //hold is true or false if we hold 'Z' or not
            Hold = keyboard_check(ord("Z")); 
            //increase speed based on hold
            CharactersNow += Increase*(1+Hold);
            if lastCharCount &lt; floor(CharactersNow)
            {
                audio_play_sound_on(oSFX.SFXEmitter,textSound,false,1);
                lastCharCount=floor(CharactersNow);
            }
            //copy string to current character
            TextLineOne = string_copy(Messages[MessageCurrent], LineOneStart, floor(CharactersNow));
            if string_width(TextLineOne)+string_width(NextCharacter) &gt;= TextMaxWidth{
                TotalCharacters += floor(CharactersNow);
                //If the next character to write is a space, skip it so we dont get a space as the first character on a line, also mark it in the TotalCharacters variable, so we dont get repeated characters later in the textbox
                if NextCharacter = " "{
                    LineTwoStart = TotalCharacters+2;
                    TotalCharacters += 1;
                }else{
                    LineTwoStart = TotalCharacters+1;
                }
                CharactersNow = 0;
                //CharactersNow = (CharactersNow - floor(CharactersNow));
                lastCharCount = 0;
                currentLine = "Two";
            }
           
        
        break;
        case "Two":
            //hold is true or false if we hold 'Z' or not
            NextCharacter = string_copy(Messages[MessageCurrent],LineTwoStart+floor(CharactersNow)+1,1);
            Hold = keyboard_check(ord("Z")); 
            //increase speed based on hold
            CharactersNow += Increase * (1 + Hold);
            if lastCharCount &lt; floor(CharactersNow)
            {
                audio_play_sound_on(oSFX.SFXEmitter,textSound,false,1);
                lastCharCount=floor(CharactersNow);
            }
            //copy string to current character
            TextLineTwo = string_copy(Messages[MessageCurrent], LineTwoStart, floor(CharactersNow));
            if string_width(TextLineTwo)+string_width(NextCharacter) &gt;= TextMaxWidth{
                TotalCharacters += floor(CharactersNow);
                if NextCharacter = " "{
                    LineThreeStart = TotalCharacters+2;
                    TotalCharacters += 1;
                }else{
                    LineThreeStart = TotalCharacters+1;
                }
                CharactersNow = 0;
                lastCharCount = 0;
                //CharactersNow = (CharactersNow - floor(CharactersNow));
                currentLine = "Three";
            }
        break;
        case "Three":
              //hold is true or false if we hold 'Z' or not
            NextCharacter = string_copy(Messages[MessageCurrent],LineThreeStart+floor(CharactersNow)+1,1);
            Hold = keyboard_check(ord("Z"));
            //increase speed based on hold
            CharactersNow += Increase * (1 + Hold);
            if lastCharCount &lt; floor(CharactersNow)
            {
                audio_play_sound_on(oSFX.SFXEmitter,textSound,false,1);
                lastCharCount=floor(CharactersNow);
            }
            //copy string to current character
            TextLineThree = string_copy(Messages[MessageCurrent], LineThreeStart, floor(CharactersNow));
            //If the message is about to go over three lines, just clear all the other lines and start writing a new line and move all the other lines one line up (the one which would go over the textbox wont be written anymore
            if string_width(TextLineThree)+string_width(NextCharacter) &gt;= TextMaxWidth{
                LinesOmitted += 1;
                TotalCharacters += floor(CharactersNow);
                if NextCharacter = " "{
                    LineFourStart = TotalCharacters+2;
                    TotalCharacters += 1;
                }else{
                    LineFourStart = TotalCharacters+1;
                }
                CharactersNow = 0;
                //CharactersNow = (CharactersNow - floor(CharactersNow));
                currentLine = "Four";
                lastCharCount = 0;
            
            }
                
        break;
        case "Four":
              //hold is true or false if we hold 'Z' or not
            NextCharacter = string_copy(Messages[MessageCurrent],LineThreeStart+floor(CharactersNow)+1,1);
            Hold = keyboard_check(ord("Z"));
            //increase speed based on hold
            CharactersNow += Increase * (1 + Hold);
            if lastCharCount &lt; floor(CharactersNow)
            {
                audio_play_sound_on(oSFX.SFXEmitter,textSound,false,1);
                lastCharCount=floor(CharactersNow);
            }
            //copy string to current character
            TextLineFour = string_copy(Messages[MessageCurrent], LineFourStart, floor(CharactersNow));
            //If the message is about to go over three lines, just clear all the other lines and start writing a new line and move all the other lines one line up (the one which would go over the textbox wont be written anymore
        
        
        break;
        }
        
    
    
} 
//if current character is more than the amount in the current message
else if TotalCharacters &gt;= MessageLength or TotalCharacters+CharactersNow &gt;= MessageLength{
    var LineOneLength, LineTwoLength
    switch currentLine{
        case "One":
           TextLineOne = string_copy(Messages[MessageCurrent], LineOneStart, MessageLength);
        break;
        
        case "Two":
            TextLineTwo = string_copy(Messages[MessageCurrent],LineTwoStart,MessageLength);
        break;    
        
        case "Three":
            TextLineThree = string_copy(Messages[MessageCurrent], LineThreeStart, MessageLength);
        break;
        
        case "Four":
            TextLineFour = string_copy(Messages[MessageCurrent],LineFourStart,MessageLength);        
        break;
    
    }
    //if we press Z...
    if (keyboard_check_pressed(ord("Z"))) {
        //if there are more messages left to show (0 -&gt; 6, in our case) 
        if (MessageCurrent &lt; (MessageEnd-1)) { 
            //increase the message by 1
            MessageCurrent += 1;
            //get the new character length for message
            MessageLength = string_length(Messages[MessageCurrent]); 
            //set the characters back to 0
            CharactersNow = 0;
            lastCharCount = 0;
            TotalCharacters = 0; 
            //clear the drawn text
            currentLine = "One";
            TextLineOne  = "";
            TextLineTwo  = "";
            TextLineThree= "";
            TextLineFour = "";
            LineTwoStart   = 0;
            LineThreeStart = 0;
            LineFourStart  = 0;
            MessageDraw = "";
            Ready = true;
            Next = false;
            LinesOmitted = 0;
        }
        //if our messages are done
        else {
            Owner.State = "Idle";
            if oPlayerWorld.State != "Event"{
                oPlayerWorld.State = "Idle";
            }
            //destroy the object
            instance_destroy(); 
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sTextBox,0,StartingX,StartingY,xScale,yScale,0,c_white,1);
draw_set_valign(fa_top);
draw_set_halign(fa_left);
draw_set_color(c_white);
draw_set_font(fText);

//Draw the message
if LinesOmitted = 0{
    draw_text(StartingX+xMargin,StartingY+yMargin, TextLineOne);
    draw_text(StartingX+xMargin,StartingY+yMargin+string_height(TextLineOne), TextLineTwo);
    draw_text(StartingX+xMargin,StartingY+yMargin+string_height(TextLineOne)+string_height(TextLineTwo), TextLineThree);
}else if LinesOmitted = 1{
    draw_text(StartingX+xMargin,StartingY+yMargin,TextLineTwo);
    draw_text(StartingX+xMargin,StartingY+yMargin+string_height(TextLineTwo),TextLineThree);
    draw_text(StartingX+xMargin,StartingY+yMargin+string_height(TextLineTwo)+string_height(TextLineThree),TextLineFour);
}

/*
draw_text(1920/2, 1080/2, string(CharactersNow));
draw_text(1920/2, 1080/4, string(TotalCharacters));
draw_text(1920/4, 80, string(string_width(TextLineOne)));
draw_text(1920/2, 80, string(string_width(TextLineTwo)));
draw_text(1920  , 80, string(string_width(TextLineThree)));
*/
draw_set_color(c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
