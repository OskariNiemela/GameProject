<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCrowBattle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>oAi</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>InitializeAi("Enemy", "Crow", "Melee", sCrowBattleAttack, sCrowBattle, sCrowBattleDead,sBlank,sBlank,sCrowBattleReturn,sBlank,sCrowBattleHurt,false,sCrowBattle);

InitializeAISound(sndGunShot2,sndBlank,sndBlank,sndBlank);

InitializeAIStats(2, 0, 0, 0, 6, 5);
InitializeAIAbilities(oFireShot,sCrowBattleAttack, 10);

//AI Stuff

Target = noone;

Assess = false;


image_speed = AnimationSpeed;

//AttackTime = BaseAttackTime/(0.25*Speed)
AttackTime = 10/(0.30*Speed);
//MovementTime = BaseMovementTime / (0.5*Speed);
MovementTime = 16/(0.5*Speed);

//Attack timer is the time the AI waits between attacks.
AttackTimer = AttackTime;
//MovementTimer is the time the AI waits between moving one tile.
MovementTimer = MovementTime;
Destination = noone;

EnemiesOnRow = false;

var i;
i = 0;
repeat(4){
    ThreatCandidates[i] = noone;
    i += 1;
}
//

ModHP = 0;
ModMAttack = 0;
ModSAttack = 0;
ModRAttack = 0;
ModSpeed   = 0;
ModAP      = 0;
ModCritStr = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(State){
    
    //Decide which player character is our target, so you can approach enemies/get on the same y level as enemies to shoot them.
    case"Assess":
        //Decide who we are targeting
        AssessThreatRanged();
        //If we found a target, move toward the y row the enemy is on
        if instance_exists(Target){
            AIMovementRanged();
        }else{
            MovementTimer = MovementTime;
            State = "Idle";
        
        }
    break;
    //Decide which way to move inorder to get to the most ideal placement to attack our target.
    case"Decide":
        
        
    break;
    
    case"Move":

    break;
    
    
    case"Attack":
        RangedAttack(AttackStats,Attack,oBullet,-1);
    break;
    
    case"Flashing":
 
    break;
    
    case"Return":
        AttackReturnAnimAI();
    break;

    
    case"Dead":
        map[gridX,gridY].occupant = noone;
        depth = 15;
        oBattleScreen.EncounterSize -= 1;
        AttackTimer = 10;
        sprite_index = sCrowBattleDead
        MovementTimer = 10;
        State = "Deactive";
    break;
    
    case"Deactive":
        AttackTimer = 10;
        MovementTimer = 10;
    
    
    break;
    
    case"Pause":
        GamePausedAI();
    
    
    break;
    
    case"Stunned":
    if sprite_index != Stunned{
        sprite_index = Stunned;
    }
    StunDuration -= DELTA_TIME;
    MovementTimer = MovementTime;
    AttackTimer = AttackTime;
    
    if StunDuration &lt;= 0{
        State = "Idle";
    
    
    } 
    
    break;
    
    
    case"Paused":
        image_index = AnimationFrame;
    break;
    
    case"UseAbility":
        UseAbilityAIFireShot(Attack,2);
    
    break;
    
    case"UnPause":
        image_index = AnimationFrame;
        Timer = PreviousTimer;
        AttackTimer = AttackTimerPaused;
        MovemementTimer = MovementTimerPaused;
        State = PreviousState;
        AbilityCooldown = AbilityCooldownPaused;
    break;
}
if instance_exists(Target) and AbilityCooldown &lt;= 0{
    TargetXPositionDifference = 0;
    TargetYPositionDifference = (Target.gridY - gridY);



}else if AbilityCooldown &lt;= 0{
    AssessThreatRanged();
    TargetXPositionDifference = 0;
    TargetYPositionDifference = (Target.gridY - gridY);

}


AIDecideRanged(TargetXPositionDifference, TargetYPositionDifference);
ReduceAITimers();
TakeDamage();
SpriteShake();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
