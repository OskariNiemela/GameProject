<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sLineFire</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>SpecialAbilities</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set our Path 
Path = path_add();
path_set_kind(Path, 0);
path_set_closed(Path, false);
Range = 600;
FlySpeed = 2000/room_speed;

Activated = false;
Fired = false;

Owner = noone;

Damage = random_range(5,10);
Damage = round(Damage);
DamageType = "Special";

ToolbarObject = oLineFireToolbar;

Valid = true;










</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>



if Activated{
    x = Owner.x /*+ GRID_SIZE/2;*/
    y = Owner.y /*+ 64;*/
    Owner.State = "UsingAbility";
    //Get The direction our mouse pointer is in
    Direction = point_direction(x,y, mouse_x, mouse_y);
    CancelAbility();
    if mouse_check_button_pressed(mb_left){
        //Remember our old position, this is important because we have to destroy ourselves once we have traveled our range
        OldX = x;
        OldY = y;
        //Set the direction to the mouse pointer
        direction = Direction;
        //set our speed to Flyspeed
        speed = FlySpeed;
        Activated = false;
        //Set our state to fired and wipe our owner
        Owner.State = "EndTurn";
        Fired = true;
    }
    
           
}
if Fired = true{
    image_angle = direction;
    //Check for nodes that we havee hit
    HitNode = collision_point(x,y, oNoDeH, true, true);
    if instance_exists(HitNode){
        if !HitNode.HitWithAbility{
            // if such a node exists tell it it has been hit with an ability
            HitNode.HitWithAbility = true;
            //If the node has an occupant, and it isnt our Owner, Tell the occupant that he has been damaged
            if instance_exists(HitNode.occupant) and HitNode.occupant != Owner{
                HitNode.occupant.SpecialDamageTaken = Damage;
                HitNode.occupant.Attacker = Owner;
                HitNode.occupant.DamageType = "Special";
                HitNode.occupant.State = "Hurt";
            }
        }
        
    }
    // if we have traveled our range, destroy us and wipe all the nodes so that none of them think they have alreadyt been hit
    if distance_to_point(OldX,OldY) &gt;= Range{
        WipeNodeDMG();
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*WipeNodeDMG();
oBattleScreen.AnimationInProgress = 0;
Owner.UsingAbilities = false;
instance_destroy();*/
Owner.State = "EndTurn";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//If we have been chosen
if Activated{
    //Direction toward the mouse pointer
    Direction = point_direction(x,y, mouse_x, mouse_y);
    //Set The color to green
    draw_set_color(c_green);
    //Draw a line 15 pixels wide toward the direction of the mouse
    draw_line_width(x,y ,x+lengthdir_x(Range,Direction),y + lengthdir_y(Range,Direction), 15);
    draw_set_color(c_white);
    
}
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
